<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" []>

<?rfc comments="yes"?>
<?rfc compact="no"?>
<?rfc inline="yes"?>
<?rfc sortrefs="yes"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="5"?>
<?rfc tocindent="yes"?>
<?rfc tocompact="yes"?>


<rfc category="info" docName="draft-clemm-netconf-push-smart-filters-ps-00" ipr="trust200902">

<front>
<title abbrev="">Smart filters for Push Updates - Problem Statement</title>

<author fullname="Alexander Clemm" initials="A."
    surname="Clemm">
    <organization>Futurewei Technologies, Inc.</organization>
    <address>
        <postal>
            <street>2330 Central Expressway</street>
            <city>Santa Clara,</city>
            <country>USA</country>
            <code>CA 95050</code>
        </postal>
        <phone></phone>
        <email>ludwig@clemm.org</email>
    </address>
</author>

<author fullname="Eric Voit" initials="E."
    surname="Voit">
    <organization>Cisco Systems</organization>
    <address>
        <email>evoit@cisco.com</email>
    </address>
</author>

<author fullname="Xufeng Liu" initials="X."
    surname="Liu">
    <organization>Jabil</organization>
    <address>
        <email></email>
    </address>
</author>

<author fullname="Igor Bryskin" initials="I."
    surname="Bryskin">
    <organization>Huawei</organization>
    <address>
        <email></email>
    </address>
</author>

<author fullname="Tianran Zhou" initials="T."
    surname="Zhou">
    <organization>Huawei</organization>
    <address>
        <email></email>
    </address>
</author>
<author fullname="Guangying Zheng" initials="G."
    surname="Zheng">
    <organization>Huawei</organization>
    <address>
        <email></email>
    </address>
</author>
<author fullname="Henk Birkholz" initials= "H." 
    surname="Birkholz">
    <organization>Fraunhofer SIT</organization>
    <address>
        <email></email>
    </address>
</author>
<date month="October" year="2017" />

<abstract>
    <t>    
		This document defines a problem statement for Smart Filters for Push Updates.   
        Smart Filters for Push Updates (referred to simply as "Smart Filters" in the context of this document) 
        allows to filter push updates based on values of pushed objects and/or state, such as previous updates. 
        Smart Filters provide an important building block for service assurance and network automation.           
    </t>
</abstract>

</front>


<middle>
	<section anchor="intro" title="Introduction">

		<t>
        YANG-Push <xref target="yang-push"/> allows client applications to subscribe to continuous datastore updates without needing to poll.  YANG-Push subscriptions allow client applications to select which datanodes are of interest.  For this purpose, filters that act as node selectors are offered.  However, what is currently not supported are filters that filter updates based on values, such as sending updates only when the value falls within a certain range.  Also not supported are filters that would require additional state, such as sending updates only when the value exceeds a certain threshold for the first time but not again until the threshold is cleared.  We refer to such filters as "smart filters", with further subcategories of "smart stateless filters" and "smart stateful filters", respectively. 
        </t>
        <t>
        Smart filters involve more complex subscription and implementation semantics than the simple selection filters that are currently offered as part of YANG-Push.  They involve post processing of updates that goes beyond basic update generation for polling avoidance and place additional intelligence at the server.  Because of this, smart filter functionality was not included in the YANG-Push specification, although it was recognized that YANG-Push could be extended to include such functionality if needed.  This is the purpose of this specification.  
        </t>
        <t> 
        Smart filters facilitate service assurance, because they allow client applications to focus on "outliers" and updates that signify exceptions and conditions of interest have the biggest operational significance. They save network resources by avoiding the need to stream updates that would be discarded anyway, and allow applications to scale better since larger networks imply a larger amount of smart filtering operations delegated away from the application to the network.  Smart filters also facilitate network automation as they constitute an important ingredient to specify triggers for automated actions.   
		</t>
	</section>


 <section title="Key Words">
   <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
      "MAY", and "OPTIONAL" in this document are to be interpreted as
      described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
      when, and only when, they
      appear in all capitals, as shown here.
   </t>
   </section>
	
	<section title="Definitions and Acronyms">

<t>
<list style="empty">
    <t>Smart Filter: A filter that involves some processing, such as comparing values or differentiating behavior depending on state.</t>
    <t>TCA: Threshold Crossing Alert. </t>
	<t>YANG-Push: A server capability that allows client applications to subscribe to network management datastore updates.</t>
</list>
</t>
</section>

<section title="Problem Statement" anchor="problem-statement">
<t>
YANG-Push provides client applications with the ability to subscribe to continuous updates from network management datastores, obviating the need to perform polling and resulting in more robust and efficient applications.  However, many applications do not require every update, only updates that are of certain interest.  
</t>
<t>
For example, an update concerning interface utilization may be only needed when a certain utilization level is breached.  Sending continuous updates when utilization is low might divert processing resources away from updates regarding interfaces whose utilization level may reach a critical point that requires attention.  Doing so will require a filter based on an object value.  Even sending continuous updates when utilization is high may be too much and counterproductive. It may be sufficient to send an update when a threshold is breached to raise a flag of attention, but then not to continue sending updates while the condition still persists but simply let the client application know when the threshold is cleared.  This behavior cannot be accomplished simply by a value-based filter, but requires additional state to be maintained (so that the server has a memory whether or not the condition of a breached threshold has already been reported in prior update cycles). 
</t>
<t> What is needed are "Smart Filters" that provide the ability to apply filters based on object values, possibly also state state.  Smart Filters are useful for Service Assurance applications that need to monitor operational data for values that fall outside normal operational ranges.  They are also useful for network automation, in which automated actions are automatically triggered based on when certain events in the network occur while certain conditions hold.  A YANG-Push subscription with a smart filter can in effect act as a source for such events.  Combined with an optional check for a condition when an event is observed, this can serve as the basis of action triggers.  
</t>
<t>   
Smart Filters for Push Updates will provide support for the following features:
<list style="symbols">
<t>Support for smart filter extensions to YANG-Push subscriptions.  The targeted model takes a "base" YANG-Push subscription and subjects updates to an additional filtering stage that is based on value.  
</t>
<t> Support for refined on-change update semantics that allow client to distinguish whether object values were omitted or included because the object was created or deleted, or because the object's value fell outside filter range.  
</t>
<t>Support for selected stateful filters:
<list style="symbols">
<t>This includes specifically support for generalized "threshold crossing alert" filters, or filters that provide an update only when an object's value passes a filter for the first time, and not again until the object's value passes a counter filter.  In effect, the support involves attaching filter and counter filter to an object, including a switch at the object indicating which filter is in effect, and providing a distinction in the update which filter (e.g. onset of clear) was applied.  
</t>
<t>It may include additional filters, such a "recent high water mark" filters that allow to specify a time horizon until the current high water mark clears.  A recent high water mark filter sends an update to an object only if its new value is greater than the last value that had been previously reported.   
</t>
</list>
</t>
</list>
</t>
<t>
It is easy to conceive of filters that are very smart and powerful yet also very complex.  While filters as defined in YANG-Push may be a tad too simple for the applications envisioned here, it is important to keep filters still simple enough to ensure broad implementation and support by networking devices. The purpose of smart filters defined in this effort is to address the 90% of cases that can be addressed using 10% of the complexity. Items like the following will therefore be outside the scope:
<list style="symbols">
<t>Filters that involve freely programmable logic.</t>
<t>Filters that aggregate or otherwise process information over time.  An example would be filters that compute an aggregate over a time series of data (e.g. an object's average or top percentile value)
</t>
<t>Filters that aggregate or compare an object's values with those of other objects (e.g. the maximum or average from objects over a list).
</t>
</list>
</t>
</section>
<section title="IANA Considerations">
<t>Not applicable</t>
</section>
	

<section title="Security Considerations">
 
<t>
  The application of smart filters requires a certain amount of processing resources at the server.  An attacker could attempt to attack a server by creating YANG-push subscriptions with a large number of complex smart filters in an attempt to diminish server resources.  Server implementations can guard against such scenarios in several ways.  For one, they can implement NACM in order to require proper authorization for requests to be made.  Second, server implementations can reject requests made for a a larger number of smart filters than the implementation can reasonably sustain.  
</t>
</section>

</middle>

<back>

	<references title="Normative References">
		<?rfc include="reference.RFC.2119"?>
		<?rfc include="reference.RFC.3688"?>
		<?rfc include="reference.RFC.6020"?>
		<?rfc include="reference.RFC.6241"?>
		<?rfc include="reference.RFC.7950"?>
		<?rfc include="reference.RFC.8040"?>
	    <?rfc include="reference.RFC.8072"?>
		<?rfc include="reference.RFC.8174"?>
		

    <reference anchor="yang-push" target="https://datatracker.ietf.org/doc/draft-ietf-netconf-yang-push/">
	<front>		
	<title>Subscribing to YANG datastore push updates</title>
	<author initials="A" surname="Clemm" fullname="Alexander Clemm">
	</author>
	<author initials="E" surname="Voit" fullname="Eric Voit">
	</author>
	<author initials="A" surname="Gonzalez Prieto" fullname="Alberto Gonzalez Prieto">
	</author>
	<author initials="A" surname="Tripathy" fullname="Ambika Tripathy">
	</author>
	<author initials="E" surname="Nilsen-Nygaard" fullname="Einar Nilsen-Nygaard">
	</author>
	<author initials="A" surname="Bierman" fullname="Andy Bierman">
	</author>
	<author initials="B" surname="Lengyel" fullname="Balazs Lengyel">
	</author>
	<date month="August" year="2017" />
	</front>
	</reference>

			<reference anchor="notif-sub" target="https://datatracker.ietf.org/doc/draft-ietf-netconf-subscribed-notifications/">
	<front>		
	<title>Custom subscription to event notifications</title>
	<author initials="E" surname="Voit" fullname="Eric Voit">
	</author>
	<author initials="A" surname="Clemm" fullname="Alexander Clemm">
	</author>
	<author initials="A" surname="Gonzalez Prieto" fullname="Alberto Gonzalez Prieto">
	</author>
	<author initials="E" surname="Nilsen-Nygaard" fullname="Einar Nilsen-Nygaard">
	</author>
	<author initials="A" surname="Tripathy" fullname="Ambika Tripathy">
	</author>
	<date month="July" year="2017" />
	</front>
	</reference>
		</references>

</back>
	
</rfc>
