PRE-DRAFT:  March 21 2018
*************************




NETCONF                                                          E. Voit
Internet-Draft                                             Cisco Systems
Intended status: Standards Track                                A. Clemm
Expires: September 19, 2018                                       Huawei
                                                      A. Gonzalez Prieto
                                                                  VMWare
                                                       E. Nilsen-Nygaard
                                                             A. Tripathy
                                                           Cisco Systems
                                                          March 18, 2018


        Customized Subscriptions to a Publisher's Event Streams
             draft-ietf-netconf-subscribed-notifications-11

Abstract

   This document defines mechanisms and a YANG Data Model enabling
   subscriber-specific subscriptions to a publisher's event streams.
   Also defined are delivery mechanisms for instances of the resulting
   notification messages.  Combined this allows a subscriber to request
   for and receive a continuous, custom feed of publisher generated
   information.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on September 19, 2018.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents



Voit, et al.           Expires September 19, 2018               [Page 1]

Internet-Draft          Subscribed Notifications              March 2018


   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Motivation  . . . . . . . . . . . . . . . . . . . . . . .   3
     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   3
     1.3.  Solution Overview . . . . . . . . . . . . . . . . . . . .   4
     1.4.  Relationship to RFC-5277  . . . . . . . . . . . . . . . .   6
   2.  Solution  . . . . . . . . . . . . . . . . . . . . . . . . . .   6
     2.1.  Event Streams . . . . . . . . . . . . . . . . . . . . . .   6
     2.2.  Event Stream Filters  . . . . . . . . . . . . . . . . . .   7
     2.3.  QoS . . . . . . . . . . . . . . . . . . . . . . . . . . .   7
     2.4.  Dynamic Subscriptions . . . . . . . . . . . . . . . . . .   8
     2.5.  Configured Subscriptions  . . . . . . . . . . . . . . . .  16
     2.6.  Event Record Delivery . . . . . . . . . . . . . . . . . .  21
     2.7.  Subscription State Notifications  . . . . . . . . . . . .  22
     2.8.  Subscription Monitoring . . . . . . . . . . . . . . . . .  27
     2.9.  Advertisement . . . . . . . . . . . . . . . . . . . . . .  28
   3.  YANG Data Model Trees . . . . . . . . . . . . . . . . . . . .  28
     3.1.  Event Streams Container . . . . . . . . . . . . . . . . .  28
     3.2.  Event Stream Filters Container  . . . . . . . . . . . . .  28
     3.3.  Subscriptions Container . . . . . . . . . . . . . . . . .  29
   4.  Data Model  . . . . . . . . . . . . . . . . . . . . . . . . .  30
   5.  Considerations  . . . . . . . . . . . . . . . . . . . . . . .  56
     5.1.  Implementation Considerations . . . . . . . . . . . . . .  56
     5.2.  IANA Considerations . . . . . . . . . . . . . . . . . . .  56
     5.3.  Security Considerations . . . . . . . . . . . . . . . . .  57
   6.  Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  60
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  60
     7.1.  Normative References  . . . . . . . . . . . . . . . . . .  60
     7.2.  Informative References  . . . . . . . . . . . . . . . . .  61
   Appendix A.  Changes between revisions  . . . . . . . . . . . . .  62
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  66

1.  Introduction

   This document defines mechanisms and a YANG Data Model enabling
   subscriber-specific subscriptions to a publisher's event streams.
   Effectively this enables a "subscribe then publish" capability where
   the customized information needs and access permissions of each
   target receiver are understood by the publisher before subscribed



Voit, et al.           Expires September 19, 2018               [Page 2]

Internet-Draft          Subscribed Notifications              March 2018


   event records are marshaled and pushed.  The receiver then gets a
   continuous, custom feed of publisher generated information.

   While the functionality defined in this document is transport-
   agnostic, transports like NETCONF [RFC6241] or RESTCONF [RFC8040] can
   be used to configure or dynamically signal subscriptions, and there
   are bindings defined for subscribed event record delivery for NETCONF
   within [I-D.draft-ietf-netconf-netconf-event-notifications], and for
   HTTP2 or HTTP1.1 within [I-D.draft-ietf-netconf-restconf-notif].

   The YANG model in this document conforms to the Network Management
   Datastore Architecture defined in
   [I-D.draft-ietf-netmod-revised-datastores]

1.1.  Motivation

   Various limitations in [RFC5277] are discussed in [RFC7923].
   Resolving these issues is the primary motivation for this work.  Key
   capabilities supported by this document include:

   o  multiple subscriptions on a single transport session

   o  support for dynamic and configured subscriptions

   o  modification of an existing subscription in progress

   o  per-subscription operational counters

   o  negotiation of subscription parameters (through the use of hints
      returned as part of declined subscription requests)

   o  subscription state change notifications (e.g., publisher driven
      suspension, parameter modification)

   o  independence from transport

1.2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   Configuration: defined in [I-D.draft-ietf-netmod-revised-datastores]

   Configuration datastore: defined in
   [I-D.draft-ietf-netmod-revised-datastores].



Voit, et al.           Expires September 19, 2018               [Page 3]

Internet-Draft          Subscribed Notifications              March 2018


   Configured subscription: A subscription installed via configuration
   into a configuration datastore.

   Dynamic subscription: A subscription agreed between subscriber and
   publisher created via an establish-subscription RPC.

   Event: An occurrence of something that may be of interest.  Examples
   include, a configuration change, a fault, a change in status,
   crossing a threshold, or an external input to the system.

   Event record: A set of information detailing an event.

   Notification message: Information intended for a receiver indicating
   that one or more event(s) have occurred.  A notification message may
   bundle multiple event records.  This includes the bundling of
   multiple, independent [RFC7950] notifications.

   Publisher: An entity responsible for streaming notification messages
   per the terms of a subscription.

   Receiver: A target to which a publisher pushes subscribed event
   records.  For dynamic subscriptions, the receiver and subscriber are
   the same entity.

   Stream (also referred to as "event stream"): A continuous,
   chronologically ordered set of events aggregated under some context.

   Stream filter: Evaluation criteria which may be applied against event
   records within a stream.  Event records pass the filter when
   specified criteria are met.

   Subscriber: An entity able to request and negotiate a contract for
   the generation and push of event records from a publisher.  For
   dynamic subscriptions, the receiver and subscriber are the same
   entity.

   Subscription: A contract with a publisher, stipulating which
   information one or more receivers wish to have pushed from the
   publisher without the need for further solicitation.

   All YANG tree diagrams used in this document follow the notation
   defined in [I-D.ietf-netmod-yang-tree-diagrams].

1.3.  Solution Overview

   This document describes a transport agnostic mechanism for
   subscribing to and receiving content from a stream within a
   publisher.  This mechanism is through the use of a subscription.



Voit, et al.           Expires September 19, 2018               [Page 4]

Internet-Draft          Subscribed Notifications              March 2018


   Two types of subscriptions are supported:

   1.  Dynamic subscriptions, where a subscriber initiates a
       subscription negotiation with a publisher via an RPC.  If the
       publisher is able to serve this request, it accepts it, and then
       starts pushing notification messages back to the subscriber.  If
       the publisher is not able to serve it as requested, then an error
       response is returned.  This response MAY include hints at
       subscription parameters that, had they been present, would have
       enabled the dynamic subscription request to be accepted.

   2.  Configured subscriptions, which allow the management of
       subscriptions via a configuration so that a publisher can send
       notification messages to configured receiver(s).  Support for
       configured subscriptions is optional, with its availability
       advertised via a YANG feature.

   Additional characteristics differentiating configured from dynamic
   subscriptions include:

   o  The lifetime of a dynamic subscription is bounded by the transport
      session used to establish it.  For connection-oriented stateful
      transports like NETCONF, the loss of the transport session will
      result in the immediate termination of any associated dynamic
      subscriptions.  For connectionless or stateless transports like
      HTTP, a lack of receipt acknowledgment of a sequential set of
      notification messages and/or keep-alives can be used to trigger a
      termination of a dynamic subscription.  Contrast this to the
      lifetime of a configured subscription.  This lifetime is driven by
      relevant configuration being present within the publisher's
      applied configuration.  Being tied to configuration operations
      implies configured subscriptions can be configured to persist
      across reboots, and implies a configured subscription can persist
      even when its publisher is fully disconnected from any network.

   o  Configured subscriptions can be modified by any configuration
      client with write permission on the configuration of the
      subscription.  Dynamic subscriptions can only be modified via an
      RPC request made by the original subscriber, or a change to
      configuration data referenced by the subscription.

   Note that there is no mixing-and-matching of dynamic and configured
   operations on a single subscription.  Specifically, a configured
   subscription cannot be modified or deleted using RPCs defined in this
   document.  Similarly, a subscription established via RPC cannot be
   modified through configuration operations.  Also note that transport
   specific transport drafts based on this specification MUST detail the
   life cycles of both dynamic and configured subscriptions.



Voit, et al.           Expires September 19, 2018               [Page 5]

Internet-Draft          Subscribed Notifications              March 2018


   A publisher MAY terminate a dynamic subscription at any time.
   Similarly, it MAY decide to temporarily suspend the sending of
   notification messages for any dynamic subscription, or for one or
   more receivers of a configured subscription.  Such termination or
   suspension is driven by internal considerations of the publisher.

1.4.  Relationship to RFC-5277

   This document is intended to provide a superset of the subscription
   capabilities initially defined within [RFC5277].  Especially when
   extending an existing [RFC5277] implementation, it is important to
   understand what has been reused and what has been replaced.  Key
   relationships between these two documents include:

   o  this document defines a transport independent capability,
      [RFC5277] is specific to NETCONF.

   o  the data model in this document provides an alternative structure
      the Notification Management Schema of [RFC5277], Section 3.4.

   o  the RPC operations in this draft replaces the operation "create-
      subscription" defined in [RFC5277], section 4.

   o  the one way operation of [RFC5277], Section 4 is used.

   o  the included contents of the "NETCONF" stream are identical
      between this document and [RFC5277].

   o  a publisher MAY implement both the Notification Management Schema
      and RPCs defined in [RFC5277] and this new document concurrently,
      in order to support old clients.  However the use of both
      alternatives on a single transport session is prohibited.

   o  unlike [RFC5277], this document enables a single transport session
      to intermix of notification messages and RPCs for different
      subscriptions.

2.  Solution

2.1.  Event Streams

   An event stream is a named entity on a publisher which exposes a
   continuously updating set of event records.  Each event stream is
   available for subscription.  It is out of the scope of this document
   to identify a) how streams are defined (other than the NETCONF
   stream), b) how event records are defined/generated, and c) how event
   records are assigned to streams.




Voit, et al.           Expires September 19, 2018               [Page 6]

Internet-Draft          Subscribed Notifications              March 2018


   There is only one reserved event stream name within this document:
   "NETCONF".  The "NETCONF" event stream contains all NETCONF XML event
   record information supported by the publisher, except for where it
   has been explicitly indicated that this the event record MUST be
   excluded from the "NETCONF" stream.  The "NETCONF" stream will
   include individual notifications as per [RFC7950] section 7.16.  Each
   of these notifications will be treated as a distinct event record.
   Beyond the "NETCONF" stream, implementations MAY define additional
   event streams.

   As event records are created by a system, they may be assigned to one
   or more streams.  The event record is distributed to subscription's
   receiver(s) where: (1) a subscription includes the identified stream,
   and (2) subscription filtering does not exclude the event record from
   that receiver.

   Access control permissions may be used to silently exclude event
   records from within a stream for which the subscriber has no read
   access.  As an example of how this might be accomplished, see
   [RFC8341] section 3.4.6.  Note that per Section 2.7 of this document,
   subscription state change notifications are never filtered out.

   If no access control permissions are in place for stream content,
   then a receiver MUST be allowed access to all the event records on
   the stream.  If subscriber permissions change during the lifecycle of
   a subscription and stream access is no longer permitted, then the
   subscription MUST be terminated.

2.2.  Event Stream Filters

   This document defines an extensible filtering mechanism.  The filter
   itself is a boolean test which is placed on the content of an event
   record.  A 'false' filtering result causes the event message to be
   excluded from delivery to a receiver.  A filter never results in
   information being stripped from within an event record prior to that
   event record being encapsulated within a notification message.  The
   two optional stream filtering syntaxes supported are [XPATH] and
   subtree [RFC6241].

   If no stream filter is provided within a subscription, all event
   records on a stream are to be sent.

2.3.  QoS

   This document provides an optional feature describing QoS parameters.
   These parameters indicate the treatment of a subscription relative to
   other traffic between publisher and receiver.  Included are:




Voit, et al.           Expires September 19, 2018               [Page 7]

Internet-Draft          Subscribed Notifications              March 2018


   o  A "dscp" QoS marking to differentiate transport QoS behavior.
      Where provided, this marking MUST be stamped on notification
      messages.

   o  A "weighting" so that bandwidth proportional to this weighting can
      be allocated to this subscription relative to other subscriptions
      destined for that receiver.

   o  a "dependency" upon another subscription.

   Dequeuing of notification messages across independent subscriptions
   to a receiver SHOULD be allocated bandwidth proportionally based on
   each subscription's weight.

   If a subscription has a dependency, then any buffered notification
   messages containing event records selected by the parent subscription
   SHOULD be dequeued prior to the notification messages of the
   dependent subscription.  If notification messages have dependencies
   on each other, the notification message queued the longest MUST go
   first.  If a dependency included within an RPC references a
   subscription which does not exist or is no longer visible to that
   subscriber, that dependency may be silently removed.

2.4.  Dynamic Subscriptions

   Dynamic subscriptions are managed via protocol operations (in the
   form of [RFC7950], Section 7.14 RPCs) made against targets located
   within the publisher.  These RPCs have been designed extensibly so
   that they may be augmented for subscription targets beyond event
   streams.  For examples of such augmentations, see the RPC
   augmentations within [I-D.ietf-netconf-yang-push]'s YANG model.

2.4.1.  Dynamic Subscription State Model

   Below is the publisher's state machine for a dynamic subscription.
   Each state is shown in its own box.  It is important to note that
   such a subscription doesn't exist at the publisher until an
   "establish-subscription" RPC is accepted.  The mere request by a
   subscriber to establish a subscription is insufficient for that
   subscription to be externally visible.  States that are reflected in
   the YANG model appear in upper-case letters; in addition, start and
   end states are depicted to reflect subscription creation and deletion
   events.








Voit, et al.           Expires September 19, 2018               [Page 8]

Internet-Draft          Subscribed Notifications              March 2018


                      .........
                      : start :
                      :.......:
                          |
                 establish-subscription
                          |
                          |   .------modify-subscription-------.
                          v   v                                |
                    .-----------.                          .-----------.
         .--------. | receiver  |-subscription-suspended*->| receiver  |
       modify-     '|  ACTIVE   |                          | SUSPENDED |
       subscription |           |<--subscription-resumed*--|           |
         ---------->'-----------'                          '-----------'
                          |                                    |
               delete/kill-subscription                   delete/kill-
                          |                               subscription
                          v                                    |
                      .........                                |
                      :  end  :<-------------------------------'
                      :.......:

        * indicates a state change notification

          Figure 1: Publisher's state for a dynamic subscription

   Of interest in this state machine are the following:

   o  Successful "establish-subscription" or "modify-subscription" RPCs
      put the subscription into an active state.

   o  Failed "modify-subscription" RPCs will leave the subscription in
      its previous state, with no visible change to any streaming
      updates.

   o  A delete or kill RPC will end the subscription.

   o  The two state change notifications "subscription-suspended" and
      "subscription-resumed" are shown.  These are under the control of
      a publisher.  There are no direct controls over resuming a
      subscription other than to attempt a modification of a
      subscription in a way which reduces the resources consumed.

2.4.2.  Establishing a Dynamic Subscription

   The "establish-subscription" RPC allows a subscriber to request the
   creation of a subscription.  The transport selected by the subscriber
   to reach the publisher MUST be able to support multiple "establish-
   subscription" requests made within the same transport session.  In



Voit, et al.           Expires September 19, 2018               [Page 9]

Internet-Draft          Subscribed Notifications              March 2018


   addition, the transport session MUST support the pipelining of RPC
   requests made for different subscriptions.

   The input parameters of the operation are:

   o  A stream name which identifies the targeted stream of events
      against which the subscription is applied.

   o  A stream filter which may reduce the set of event records pushed.

   o  An optional encoding for the event records pushed.  Note: If no
      encoding is included, the encoding of the RPC MUST be used.

   o  An optional stop time for the subscription.  If no stop-time is
      present, notification messages will continue to be sent until the
      subscription is terminated.

   o  An optional start time for the subscription.  Where there is no
      start time, the subscription starts immediately.  If the start-
      time is in the past, it indicates that this subscription is
      requesting a replay of previously generated information from the
      event stream.  For more on replay, see Section 2.4.2.1.

   If the publisher can satisfy the "establish-subscription" request, it
   replies with an identifier for the subscription, and immediately
   starts streaming notification messages.

   Below is a tree diagram for "establish-subscription".  All objects
   contained in this tree are described within the included YANG model
   within Section 4.





















Voit, et al.           Expires September 19, 2018              [Page 10]

Internet-Draft          Subscribed Notifications              March 2018


    +---x establish-subscription
       +---w input
       |  +---w encoding?                encoding
       |  +---w (target)
       |  |  +--:(stream)
       |  |     +---w (stream-filter)?
       |  |     |  +--:(by-reference)
       |  |     |  |  +---w stream-filter-ref        stream-filter-ref
       |  |     |  +--:(within-subscription)
       |  |     |     +---w (filter-spec)?
       |  |     |        +--:(stream-subtree-filter)
       |  |     |        |  +---w stream-subtree-filter?    {subtree}?
       |  |     |        +--:(stream-xpath-filter)
       |  |     |           +---w stream-xpath-filter?
       |  |     |                                 yang:xpath1.0 {xpath}?
       |  |     +---w stream?               stream-ref
       |  |     +---w replay-start-time?    yang:date-and-time {replay}?
       |  +---w stop-time?               yang:date-and-time
       |  +---w dscp?                    inet:dscp {qos}?
       |  +---w weighting?               uint8 {qos}?
       |  +---w dependency?              sn:subscription-id {qos}?
       +--ro output
          +--ro identifier                subscription-id

             Figure 2: establish-subscription RPC tree diagram

   A publisher MAY reject the "establish-subscription" RPC for many
   reasons as described in Section 2.4.6.  The contents of the resulting
   RPC error response MAY include one or more hints on alternative
   inputs which would have resulted in a successfully established
   subscription.  Any such hints MUST be transported within a yang-data
   "establish-subscription-error-stream" container included within the
   RPC error response.

       yang-data establish-subscription-error-stream
          +--ro establish-subscription-error-stream
             +--ro reason?                   identityref
             +--ro filter-failure-hint?      string
             +--ro replay-start-time-hint?   yang:date-and-time

        Figure 3: establish-subscription RPC yang-data tree diagram

2.4.2.1.  Requesting a replay of event records

   Replay provides the ability to establish a subscription which is also
   capable of passing recently generated event records.  In other words,
   as the subscription initializes itself, it sends any previously
   generated content from within target event stream which meets the



Voit, et al.           Expires September 19, 2018              [Page 11]

Internet-Draft          Subscribed Notifications              March 2018


   filter and timeframe criteria.  The end of these historical event
   records is identified via a "replay-completed" state change
   notification.  Any event records generated since the subscription
   establishment may then follow.  All event records will be delivered
   in the order they are placed into the stream.

   Replay is an optional feature which is dependent on an event stream
   supporting some form of logging.  This document puts no on the size
   or form of the log, or where it resides within the device.

   The inclusion of a replay-start-time within an "establish-
   subscription" RPC indicates a replay request.  If the "replay-start-
   time" contains a value that is earlier than what a publisher's
   retained history supports, then the subscription MUST be rejected and
   the leaf "replay-start-time-hint" MUST be set in the reply.

   If a "replay-start-time" has been provided, a "stop-time" parameter
   may also be included.  This "stop-time" MAY be earlier than the
   current time, but MUST be later than the "replay-start-time", should
   that object also be provided.

   If the "replay-start-time" is later the scope of time covered by the
   replay buffer, then the publisher MUST send a "replay-completed"
   notification immediately after the after a successful establish-
   subscription RPC response.

   If a stream supports replay, the "replay-support" leaf is present in
   the "/streams/stream" list entry for the stream.  An event stream
   that does support replay is not expected to have an unlimited supply
   of saved notifications available to accommodate any given replay
   request.  To assess the availability of replay, subscribers can read
   the leafs "replay-log-creation-time" and "replay-log-aged-time".  See
   Figure 18 for the tree describing these elements.  The actual size of
   the replay log at any given time is a publisher specific matter.
   Control parameters for the replay log are outside the scope of this
   document.

2.4.3.  Modifying a Dynamic Subscription

   The "modify-subscription" operation permits changing the terms of an
   existing dynamic subscription established on that transport session
   via "establish-subscription".  Dynamic subscriptions can be modified
   any number of times.  If the publisher accepts the requested
   modifications, it acknowledges success to the subscriber, then
   immediately starts sending event records based on the new terms.






Voit, et al.           Expires September 19, 2018              [Page 12]

Internet-Draft          Subscribed Notifications              March 2018


   Subscriptions created by configuration cannot be modified via this
   RPC.  However configuration may be used to modify objects referenced
   by the subscription (such as a referenced filter).

   Below is a tree diagram for "modify-subscription".  All objects
   contained in this tree are described within the included YANG model
   within Section 4.

    +---x modify-subscription
       +---w input
          +---w identifier              subscription-id
          +---w (target)
          |  +--:(stream)
          |     +---w (stream-filter)?
          |        +--:(by-reference)
          |        |  +---w stream-filter-ref        stream-filter-ref
          |        +--:(within-subscription)
          |           +---w (filter-spec)?
          |              +--:(stream-subtree-filter)
          |              |  +---w stream-subtree-filter?    {subtree}?
          |              +--:(stream-xpath-filter)
          |                 +---w stream-xpath-filter?
          |                                       yang:xpath1.0 {xpath}?
          +---w stop-time?               yang:date-and-time

              Figure 4: modify-subscription RPC tree diagram

   If the publisher accepts the requested modifications on a currently
   suspended subscription, the subscription will immediately be resumed
   (i.e., the modified subscription is returned to the ACTIVE state.)
   The publisher MAY immediately suspend this newly modified
   subscription through the "subscription-suspended" notification before
   any event records are sent.

   If the publisher rejects the RPC request, the subscription remains as
   prior to the request.  That is, the request has no impact whatsoever.
   Rejection of the RPC for any reason is indicated by via RPC error as
   described in Section 2.4.6.  The contents of a such a rejected RPC
   MAY include one or more hints on alternative inputs which would have
   resulted in a successfully modified subscription.  These hints MUST
   be transported within a yang-data "modify-subscription-error-stream"
   container inserted into the RPC error response.

   Below is a tree diagram for "modify-subscription-RPC-yang-data".  All
   objects contained in this tree are described within the included YANG
   model within Section 4.





Voit, et al.           Expires September 19, 2018              [Page 13]

Internet-Draft          Subscribed Notifications              March 2018


       yang-data modify-subscription-error-stream
          +--ro modify-subscription-error-stream
             +--ro reason?                identityref
             +--ro filter-failure-hint?   string

         Figure 5: modify-subscription RPC yang-data tree diagram

2.4.4.  Deleting a Dynamic Subscription

   The "delete-subscription" operation permits canceling an existing
   subscription established on that transport session.  If the publisher
   accepts the request, and the publisher has indicated success, the
   publisher MUST NOT send any more notification messages for this
   subscription.  If the delete request matches a known subscription
   established on the same transport session, then it MUST be deleted;
   otherwise it MUST be rejected with no changes to the publisher.

   Below is a tree diagram for "delete-subscription".  All objects
   contained in this tree are described within the included YANG model
   within Section 4.

       +---x delete-subscription
          +---w input
             +---w identifier    subscription-id

              Figure 6: delete-subscription RPC tree diagram

   Dynamic subscriptions can only be deleted via this RPC using the same
   transport session previously used for subscription establishment.
   Configured subscriptions cannot be deleted using RPCs.

2.4.5.  Killing a Dynamic Subscription

   The "kill-subscription" operation permits an operator to end a
   dynamic subscription which is not associated with the transport
   session used for the RPC.  A publisher MUST terminate any dynamic
   subscription identified by RPC request.  An operator may find
   subscription identifiers which may be used with "kill-subscription"
   by searching for the IP address of a receiver within
   "subscriptions/subscription/receivers/receiver/address".

   Configured subscriptions cannot be killed using this RPC.  Instead,
   configured subscriptions are deleted as part of regular configuration
   operations.  Publishers MUST reject any RPC attempt to kill a
   configured subscription.






Voit, et al.           Expires September 19, 2018              [Page 14]

Internet-Draft          Subscribed Notifications              March 2018


   Below is a tree diagram for "kill-subscription".  All objects
   contained in this tree are described within the included YANG model
   within Section 4.

       +---x kill-subscription
          +---w input
             +---w identifier    subscription-id

               Figure 7: kill-subscription RPC tree diagram

2.4.6.  RPC Failures

   Whenever an RPC is unsuccessful, the publisher returns relevant
   information as part of the RPC error response.  Transport level error
   processing MUST be done before RPC error processing described in this
   section.  In all cases, RPC error information returned will use
   existing transport layer RPC structures, such as those seen with
   NETCONF in [RFC6241] Appendix A, or with RESTCONF in [RFC8040]
   Section 7.1.  These structures MUST be able to encode subscription
   specific errors identified below and defined within this document's
   YANG model.

   As a result of this mixture, how subscription errors are encoded
   within an RPC error response is transport dependent.  Following are
   valid errors which can occur for each RPC:

    establish-subscription         modify-subscription
    ----------------------         -------------------
    dscp-unavailable               filter-unsupported
    filter-unsupported             insufficient-resources
    history-unavailable            no-such-subscription
    insufficient-resources
    replay-unsupported

    delete-subscription            kill-subscription
    ----------------------         ----------------------
    no-such-subscription            no-such-subscription

   To see a NETCONF based example of an error response from above, see
   [I-D.draft-ietf-netconf-netconf-event-notifications], Figure 10.

   There is one final set of transport independent RPC error elements
   included in the YANG model.  These are the following three yang-data
   structures for failed event stream subscriptions:

   1.  "establish-subscription-error-stream": This MUST be returned if
       an RPC error reason has not been placed elsewhere within the
       transport portion of a failed "establish-subscription" RPC



Voit, et al.           Expires September 19, 2018              [Page 15]

Internet-Draft          Subscribed Notifications              March 2018


       response.  This MUST be sent if hints on how to overcome the RPC
       error are included.

   2.  "modify-subscription-error-stream": This MUST be returned if an
       RPC error reason has not been placed elsewhere within the
       transport portion of a failed "modify-subscription" RPC response.
       This MUST be sent if hints on how to overcome the RPC error are
       included.

   3.  "delete-subscription-error": This MUST be returned if an RPC
       error reason has not been placed elsewhere within the transport
       portion of a failed "delete-subscription" or "kill-subscription"
       RPC response.

2.5.  Configured Subscriptions

   A configured subscription is a subscription installed via a
   configuration.  Configured subscriptions may be modified by any
   configuration client with the proper permissions.  Subscriptions can
   be modified or terminated via configuration at any point of their
   lifetime.

   Configured subscriptions have several characteristics distinguishing
   them from dynamic subscriptions:

   o  persistence across publisher reboots,

   o  persistence even when transport is unavailable, and

   o  an ability to send notification messages to more than one receiver
      (note that receivers are unaware of the existence of any other
      receivers.)

   Supporting configured subscriptions is optional and advertised using
   the "configured" feature.

   In addition to the subscription parameters available to dynamic
   subscriptions described in Section 2.4.2, the following additional
   parameters are also available to configured subscriptions:

   o  Transport, encoding, and one or more receivers (and corresponding
      ports) intended as the destination for notification messages.

   o  Optional parameters to identify an egress interface, a host IP
      address, a VRF (as defined by the network instance name within
      [I-D.draft-ietf-rtgwg-ni-model]), or an IP address plus VRF out of
      which notification messages are to be pushed from the publisher.




Voit, et al.           Expires September 19, 2018              [Page 16]

Internet-Draft          Subscribed Notifications              March 2018


      Unless directed otherwise, the notification messages MUST egress
      the publisher's default interface towards the receiver.

2.5.1.  Configured Subscription State Model

   Below is the state machine for a configured subscription on the
   publisher.  This state machine describes the three states (VALID,
   INVALID, and CONCLUDED), as well as the transitions between these
   states.  The creation or modification of a configured subscription
   initiates an evaluation by the publisher to determine if the
   subscription is VALID or INVALID.  The publisher uses its own
   criteria in making this determination.  If VALID, the subscription
   becomes operational.

 .........
 : start :-.
 :.......: |
      create  .---modify-----.----------------------------------.
           |  |              |                                  |
           V  V          .-------.         .......         .---------.
  .----[evaluate]--no--->|INVALID|-delete->: end :<-delete-|CONCLUDED|
  |                      '-------'         :.....:         '---------'
  |----[evaluate]--no-.      ^                ^                 ^
  |        ^          |      |                |                 |
 yes       |          '->unsupportable      delete           stop-time
  |      modify         (subscription-   (subscription-   (subscription-
  |        |             terminated*)     terminated*)      concluded*)
  |        |                 |                |                 |
  |       (1)               (2)              (3)               (4)
  |   .---------------------------------------------------------------.
  '-->|                         VALID                                 |
      '---------------------------------------------------------------'

 Legend:
 dotted boxes: subscription creation and deletion events
 dashed boxes with uppercase letters: states for a subscription
 [evaluate]: decision point on whether the subscription is supportable
 (*): resulting subscription state change notification

       Figure 8: Publisher state model for a configured subscription

   A VALID subscription may become INVALID on one of two ways.  First,
   it may be modified in a way which fails a re-evaluation.  See (1) in
   the diagram.  Second, the publisher might determine that the
   subscription is no longer supportable.  This could be for reasons of
   an unexpected but sustained increase in stream events, degraded CPU
   capacity, a more complex referenced filter, or other higher priority
   subscriptions which have usurped resources.  See (2) in the diagram.



Voit, et al.           Expires September 19, 2018              [Page 17]

Internet-Draft          Subscribed Notifications              March 2018


   No matter the case, a "subscription-terminated" notification is sent
   to any active or suspended receivers.  A VALID subscription may also
   transition to a CONCLUDED state via (4) if a configured stop time has
   been reached.  In this case, a "subscription-concluded" is sent to
   any ACTIVE or SUSPENDED receivers.  Finally, a subscription may be
   deleted by configuration (3).

   When a subscription is considered VALID, a publisher will attempt to
   connect with all configured receivers and deliver notification
   messages.  Below is the state machine for each receiver of a
   configured subscription.  This receiver state machine is fully
   contained within the state machine of the configured subscription,
   and is only relevant when the configured subscription is in the VALID
   state.

     .-----------------------------------------------------------------.
     |                         VALID                                   |
     |   .----------.                           .--------.             |
     |   | receiver |------------------timeout->|receiver|             |
     |   |CONNECTING|<----------------reset--(4)|TIMEOUT |             |
     |   |          |<-transport---.            '--------'             |
     |   '----------'  loss,reset  |                                   |
     |      (1)          |         |                                   |
     |  subscription-   (3)        |                                   |
     |  started*    .--------.     |                       .---------. |
     |       '----->|        |     '--------------------(3)|         | |
     |              |receiver|(2)-subscription-suspended*->|receiver | |
     | subscription-| ACTIVE |                             |SUSPENDED| |
     |   modified*  |        |<--subscription-resumed*,----|         | |
     |        '---->'--------'    subscription-modified*   '---------' |
     '-----------------------------------------------------------------'

  Legend:
   dashed boxes which include the word 'receiver' show the possible
   states for an individual receiver of a VALID configured subscription.
   * indicates a state change notification

          Figure 9: Receiver state for a configured subscription

   When a subscription first becomes VALID, the operational state of
   each receiver is initialized to CONNECTING.  If transport
   connectivity is not available to any receiver, a transport session is
   established (e.g., through [RFC8071]).  Individual receivers are
   moved to an ACTIVE state when a "subscription-started" state change
   notification is successfully passed to that receiver (1).  Event
   records are only sent to ACTIVE receivers.  Configured receivers
   remain ACTIVE if both transport connectivity can be verified to the
   receiver, and event records are not being dropped due to a publisher



Voit, et al.           Expires September 19, 2018              [Page 18]

Internet-Draft          Subscribed Notifications              March 2018


   buffer overflow.  The result is that a receiver will remain ACTIVE on
   the publisher as long as events aren't being lost, or the receiver
   cannot be reached.  However if there is buffer overflow, or the
   publisher cannot generate events for a receiver, the receiver MUST be
   moved to SUSPENDED (2).  In addition, a configured subscription's
   receiver MUST be moved to CONNECTING if transport connectivity cannot
   be achieved, or if the receiver is reset via the "reset"
   configuration action (3), (4).  For more on reset, see Section 2.5.5.

   A configured subscription's receiver MUST be moved to a SUSPENDED
   state if there is transport connectivity between the publisher and
   receiver, but notification messages are not able to be generated for
   that receiver.  A configured subscription receiver MUST be returned
   to an ACTIVE state from the SUSPENDED state when notification
   messages are again being generated and a receiver has successfully
   been sent a "subscription-resumed" or a "subscription-modified".

   Modification of a configured subscription is possible at any time.  A
   "subscription-modified" state change notification will be sent to all
   active receivers, immediately followed by notification messages
   conforming to the new parameters.  Suspended receivers will also be
   informed of the modification.  However this notification will await
   the end of the suspension for that receiver.

   The mechanisms described above are mirrored in the RPCs and
   notifications within the document.  It should be noted that these
   RPCs and notifications have been designed to be extensible and allow
   subscriptions into targets other than event streams.  The YANG model
   of [I-D.ietf-netconf-yang-push] Section 4.1 provides many such
   extensions; this includes the augmentation of "/modify-
   subscription/input/target".

2.5.2.  Creating a Configured Subscription

   Configured subscriptions are established using configuration
   operations against the top-level "subscriptions" subtree.

   Because there is no explicit association with an existing transport
   session, configuration operations require additional parameters
   beyond those of dynamic subscriptions to indicate receivers, and
   possibly whether the notification messages need to come from a
   specific egress interface on the publisher.

   After a subscription is successfully established, the publisher
   immediately sends a "subscription-started" state change notification
   to each receiver.  It is quite possible that upon configuration,
   reboot, or even steady-state operations, a transport session may not
   be currently available to the receiver.  In this case, when there is



Voit, et al.           Expires September 19, 2018              [Page 19]

Internet-Draft          Subscribed Notifications              March 2018


   something to transport for an active subscription, transport specific
   call-home operations will be used to establish the connection.  When
   transport connectivity is available, notification messages may then
   be pushed.

   With active configured subscriptions, it is allowable to buffer event
   records even after a "subscription-started" has been sent.  However
   if events are lost (rather than just delayed) due to replay buffer
   overflow, a new "subscription-started" must be sent.  This new
   "subscription-started" indicates an event record discontinuity.

   To see an example at subscription creation using configuration
   operations over NETCONF, see Appendix A of
   [I-D.draft-ietf-netconf-netconf-event-notifications].

   Note that is possible to configure replay on a configured
   subscription.  This capability is to allow a configured subscription
   to exist on a system so that event records generated during boot can
   be buffered and pushed as soon as the transport session is
   established.

2.5.3.  Modifying a Configured Subscription

   Configured subscriptions can be modified using configuration
   operations against the top-level "subscriptions" subtree.

   If the modification involves adding receivers, added receivers are
   placed in the CONNECTING state.  If a receiver is removed, the state
   change notification "subscription-terminated" is sent to that
   receiver if that receiver is ACTIVE or SUSPENDED.

   If the modification involves changing the policies for the
   subscription, the publisher sends to currently active receivers a
   "subscription-modified" notification.  For any suspended receivers, a
   "subscription-modified" notification will be delayed until the
   receiver is resumed.  (Note: in this case, the "subscription-
   modified" notification informs the receiver that the subscription has
   been resumed, so no additional "subscription-resumed" need be sent.
   Also note that if multiple modifications have occurred during the
   suspension, only the latest one need be sent to the receiver.)

2.5.4.  Deleting a Configured Subscription

   Subscriptions can be deleted through configuration against the top-
   level "subscriptions" subtree.

   Immediately after a subscription is successfully deleted, the
   publisher sends to all receivers of that subscription a state change



Voit, et al.           Expires September 19, 2018              [Page 20]

Internet-Draft          Subscribed Notifications              March 2018


   notification stating the subscription has ended (i.e., "subscription-
   terminated").

2.5.5.  Resetting a Configured Receiver

   It is possible that a configured subscription to a receiver needs to
   be reset.  This is accomplished via the "reset" action within the
   YANG model at "/subscriptions/subscription/receivers/receiver/reset".
   This re-initialization may be useful in cases where a publisher has
   timed out trying to reach a receiver.  When such a reset occurs, a
   transport session will be initiated if necessary, and a new
   "subscription-started" notification will be sent.

2.5.6.  Replay for a Configured Subscription

   It is possible to place a start time on a configured subscription.
   This enables functionality like immediately streaming boot log
   information off of a publisher immediately after restart.

   When any such configured subscription receivers become ACTIVE,
   buffered event records (if any) will be sent immediately after the
   "subscription-started" notification.  The first event sent will be
   the most recent following the latest of four different times: the
   "replay-log-creation-time", "replay-log-aged-time", "replay-start-
   time", or the most recent publisher boot time.

   All other replay functionality remains the same as with dynamic
   subscriptions as described in Section 2.4.2.1.

2.6.  Event Record Delivery

   Whether dynamic or configured, once a subscription has been set up,
   the publisher streams event records via notification messages per the
   terms of the subscription.  For dynamic subscriptions, notification
   messages are sent over the session used to establish the
   subscription.  For configured subscriptions, notification messages
   are sent over the connections specified by the transport, plus
   receiver IP address and port configured.  (* Update based on IETF 101
   WG discussion *) In all cases, a single transport session MUST be
   capable of supporting the intermixing of RPCs and notifications from
   different subscriptions.

   A notification message is sent to a receiver when an event record is
   not blocked by either the specified filter criteria or receiver
   permissions.  This notification message MUST be encoded in a
   <notification> message as defined in [RFC5277], Section 4.  A
   subscription's events MUST NOT be sent to a receiver until after a
   corresponding RPC response (in the case of a dynamic subscription) or



Voit, et al.           Expires September 19, 2018              [Page 21]

Internet-Draft          Subscribed Notifications              March 2018


   state-change notification (in the case of a configured subscription)
   has been passed receiver.  The following example within [RFC7950]
   section 7.16.3 is an example of a compliant message:

      <notification
             xmlns="urn:ietf:params:xml:ns:netconf:notification:1.0">
          <eventTime>2007-09-01T10:00:00Z</eventTime>
          <link-failure xmlns="http://acme.example.com/system">
              <if-name>so-1/2/3.0</if-name>
              <if-admin-status>up</if-admin-status>
              <if-oper-status>down</if-oper-status>
          </link-failure>
      </notification>

                Figure 10: subscribed notification message

2.7.  Subscription State Notifications

   In addition to sending event records to receivers, a publisher MUST
   also send subscription state notifications when events related to
   subscription management has occurred.

   Subscription state notifications are unlike other notifications in
   that they are never included in any stream.  Instead, they are
   inserted (as defined in this section) within the sequence of
   notification messages sent to a particular receiver.  Subscription
   state notifications cannot be filtered out, they cannot be stored in
   replay buffers, and they are delivered only to impacted receiver(s)
   of a subscription.  The identification of subscription state
   notifications is easy to separate from other notification messages
   through the use of the YANG extension "subscription-state-notif".
   This extension tags a notification as subscription state
   notification.

   The complete set of subscription state notifications is described in
   the following subsections.

2.7.1.  subscription-started

   This notification indicates that a configured subscription has
   started, and event records may be sent.  Included in this state
   change notification are all the parameters of the subscription,
   except for the receiver(s) addressing information and origin
   information indicating where notification messages will egress the
   publisher.  Note that if a referenced filter from the "filters"
   container has been used within the subscription, the notification
   will still provide the contents of that referenced filter under the
   "within-subscription" subtree.



Voit, et al.           Expires September 19, 2018              [Page 22]

Internet-Draft          Subscribed Notifications              March 2018


   Note that for dynamic subscriptions, no "subscription-started"
   notifications are ever sent.

   Below is a tree diagram for "subscription-started".  All objects
   contained in this tree are described within the included YANG model
   within Section 4.

       +---n subscription-started {configured}?
          +--ro identifier               subscription-id
          +--ro transport                transport {configured}?
          +--ro encoding                 encoding
          +--ro (target)
          |  +--:(stream)
          |     +--ro (stream-filter)?
          |     |  +--:(by-reference)
          |     |  |  +--ro stream-filter-ref        stream-filter-ref
          |     |  +--:(within-subscription)
          |     |     +--ro (filter-spec)?
          |     |        +--:(stream-subtree-filter)
          |     |        |  +--ro stream-subtree-filter?   <anydata>
          |     |        |          {subtree}?
          |     |        +--:(stream-xpath-filter)
          |     |           +--ro stream-xpath-filter?     yang:xpath1.0
          |     |                   {xpath}?
          |     +--ro stream                   stream-ref
          |     +--ro replay-start-time?       yang:date-and-time
          |             {replay}?
          +--ro stop-time?               yang:date-and-time
          +--ro dscp?                    inet:dscp {qos}?
          +--ro weighting?               uint8 {qos}?
          +--ro dependency?              subscription-id {qos}?


         Figure 11: subscription-started notification tree diagram

2.7.2.  subscription-modified

   This notification indicates that a subscription has been modified by
   configuration operations.  It is delivered directly after the last
   event records processed using the previous subscription parameters,
   and before any event records processed after the modification.

   Below is a tree diagram for "subscription-modified".  All objects
   contained in this tree are described within the included YANG model
   within Section 4.






Voit, et al.           Expires September 19, 2018              [Page 23]

Internet-Draft          Subscribed Notifications              March 2018


       +---n subscription-modified
          +--ro identifier               subscription-id
          +--ro transport                transport {configured}?
          +--ro encoding                 encoding
          +--ro (target)
          |  +--:(stream)
          |     +--ro (stream-filter)?
          |     |  +--:(by-reference)
          |     |  |  +--ro stream-filter-ref        stream-filter-ref
          |     |  +--:(within-subscription)
          |     |     +--ro (filter-spec)?
          |     |        +--:(stream-subtree-filter)
          |     |        |  +--ro stream-subtree-filter?   <anydata>
          |     |        |          {subtree}?
          |     |        +--:(stream-xpath-filter)
          |     |           +--ro stream-xpath-filter?     yang:xpath1.0
          |     |                   {xpath}?
          |     +--ro stream                   stream-ref
          |     +--ro replay-start-time?       yang:date-and-time
          |             {replay}?
          +--ro stop-time?               yang:date-and-time
          +--ro dscp?                    inet:dscp {qos}?
          +--ro weighting?               uint8 {qos}?
          +--ro dependency?              subscription-id {qos}?


        Figure 12: subscription-modified notification tree diagram

   A publisher most often sends this notification directly after the
   modification of any configuration parameters impacting a configured
   subscription.  But it may also be sent at two other times.

   1.  Where a configured subscription has been modified during the
       suspension of a receiver, the notification will be delayed until
       the receiver's suspension is lifted.  In this situation, the
       notification indicates that the subscription has been both
       modified and resumed.

   2.  While this state change will be most commonly used with
       configured subscriptions, with dynamic subscriptions, there is
       also one time this notification will be sent.  A "subscription-
       modified" state change notification MUST be sent if the contents
       of the filter identified by the subscription's "stream-filter-
       ref" leaf has changed.







Voit, et al.           Expires September 19, 2018              [Page 24]

Internet-Draft          Subscribed Notifications              March 2018


2.7.3.  subscription-terminated

   A publisher MAY terminate pushing subscribed event records to a
   receiver.  This notification indicates that no further notification
   messages should be expected from the publisher.  A publisher may
   terminate a subscription for the following reasons:

   1.  Configuration which removes a configured subscription, or a
       "kill-subscription" RPC.  These are identified via the reason
       "no-such-subscription".

   2.  A referenced filter is no longer accessible.  This is identified
       by "filter-unavailable".

   3.  The stream referenced by a subscription is no longer accessible
       by the receiver.  This is identified by "stream-unavailable".

   4.  A suspended subscription has exceeded some timeout.  This is
       identified by "suspension-timeout".

   Each of the reasons above correspond one-to-one with a "reason"
   identityref specified within the YANG model.

   Below is a tree diagram for "subscription-terminated".  All objects
   contained in this tree are described within the included YANG model
   within Section 4.

       +---n subscription-terminated
          +--ro identifier    subscription-id
          +--ro reason        identityref

       Figure 13: subscription-terminated notification tree diagram

   Note: this state change notification MUST be sent to a dynamic
   subscription's receiver when the "kill-subscription" RPC is
   successful, or other event other than reaching the subscription's
   stop time results in the end of a subscription.

2.7.4.  subscription-suspended

   This notification indicates that a publisher has suspended the
   sending of event records to a receiver, and also indicates the
   possible loss of events.  Suspension happens when capacity
   constraints stop a publisher from serving a valid subscription.  The
   two conditions where is this possible are:

   1.  "insufficient-resources" when a publisher is unable to produce
       the requested stream of notification messages, and



Voit, et al.           Expires September 19, 2018              [Page 25]

Internet-Draft          Subscribed Notifications              March 2018


   2.  "unsupportable-volume" when the bandwidth needed to get generated
       notification messages to a receiver exceeds a threshold.

   These conditions are encoded within the "reason" object.  No further
   notification will be sent until the subscription resumes or is
   terminated.

   Below is a tree diagram for "subscription-suspended".  All objects
   contained in this tree are described within the included YANG model
   within Section 4.

       +---n subscription-suspended
          +--ro identifier    subscription-id
          +--ro reason        identityref

        Figure 14: subscription-suspended notification tree diagram

2.7.5.  subscription-resumed

   This indicates that a previously suspended subscription has been
   resumed under the unmodified terms previously in place.  Subscribed
   event records generated after the generation of this state change
   notification will be sent.

   Below is a tree diagram for "subscription-resumed".  All objects
   contained in this tree are described within the included YANG model
   within Section 4.

       +---n subscription-resumed
          +--ro identifier    subscription-id

         Figure 15: subscription-resumed notification tree diagram

2.7.6.  subscription-completed

   This notification indicates that a subscription, which includes a
   "stop-time", has successfully finished passing event records upon the
   reaching of that time.

   Below is a tree diagram for "subscription-completed".  All objects
   contained in this tree are described within the included YANG model
   within Section 4.

       +---n subscription-completed
          +--ro identifier    subscription-id

        Figure 16: subscription-completed notification tree diagram




Voit, et al.           Expires September 19, 2018              [Page 26]

Internet-Draft          Subscribed Notifications              March 2018


2.7.7.  replay-completed

   This notification indicates that all of the event records prior to
   the current time have been passed to a receiver.  It is sent before
   any notification message containing an event record with a timestamp
   later than (1) the "stop-time" or (2) the subscription's start time.

   If a subscription contains no "stop-time", or has a "stop-time" that
   has not been reached, then after the "replay-completed" notification
   has been sent, additional event records will be sent in sequence as
   they arise naturally on the publisher.

   Below is a tree diagram for "subscription-completed".  All objects
   contained in this tree are described within the included YANG model
   within Section 4.

       +---n replay-completed
          +--ro identifier    subscription-id

           Figure 17: replay-completed notification tree diagram

2.8.  Subscription Monitoring

   In the operational datastore, the container "subscriptions" maintains
   the state of all known subscriptions.  This includes subscriptions
   that were established (and have not yet been deleted) using RPCs, as
   well as subscriptions that have been configured as part of
   configuration.  Using datastore retrieval operations, or subscribing
   to this information via [I-D.ietf-netconf-yang-push] allows the state
   of subscriptions and their connectivity to receivers to be monitored.

   Each subscription is represented as a list element.  While many
   subscription objects are "config true", dynamic subscriptions are
   only included within the operational datastore.  Operational
   information which may be monitored includes receiver counter
   information, the state of the receiver (e.g., is currently active or
   suspended), as well as the various subscription parameters that are
   in effect.  Leaf "configured-subscription-state" indicates that the
   subscription came into being via configuration, and the current state
   of the configured subscription.

   Dynamic subscriptions are removed from the list once they expire
   (reaching stop-time) or when they are terminated.  Configured
   subscriptions need to be deleted from the configuration by a
   configuration editing operation even if the stop time has been
   passed.





Voit, et al.           Expires September 19, 2018              [Page 27]

Internet-Draft          Subscribed Notifications              March 2018


2.9.  Advertisement

   Publishers supporting this document MUST indicate support of the YANG
   model "ietf-subscribed-notifications" within the YANG library of the
   publisher.  In addition support for optional features: "encode-xml",
   "encode-json", "configured" "supports-vrf", "qos", "xpath",
   "subtree", "interface-designation", and "replay" MUST also be
   indicated if supported.

3.  YANG Data Model Trees

   This section contains tree diagrams for nodes defined in Section 4.
   For tree diagrams of state change notifications, see Section 2.7.  Or
   for the tree diagrams for the RPCs, see Section 2.4.

3.1.  Event Streams Container

   A publisher maintains a list of available event streams as
   operational data.  This list contains both standardized and vendor-
   specific event streams.  This enables subscribers to discover what
   streams a publisher supports.

       +--ro streams
          +--ro stream* [name]
             +--ro name                        string
             +--ro description                 string
             +--ro replay-support?             empty {replay}?
             +--ro replay-log-creation-time?   yang:date-and-time
             |       {replay}?
             +--ro replay-log-aged-time?       yang:date-and-time
                     {replay}?


                 Figure 18: Stream Container tree diagram

   Above is a tree diagram for the streams container.  All objects
   contained in this tree are described within the included YANG model
   within Section 4.

3.2.  Event Stream Filters Container

   The "filters" container maintains a list of all subscription filters
   that persist outside the life-cycle of a single subscription.  This
   enables pre-defined filters which may be referenced by more than one
   subscription.






Voit, et al.           Expires September 19, 2018              [Page 28]

Internet-Draft          Subscribed Notifications              March 2018


       +--rw filters
          +--rw stream-filter* [identifier]
             +--rw identifier               filter-id
             +--rw (filter-spec)?
                +--:(stream-subtree-filter)
                |  +--rw stream-subtree-filter?   <anydata> {subtree}?
                +--:(stream-xpath-filter)
                   +--rw stream-xpath-filter?     yang:xpath1.0 {xpath}?

                 Figure 19: Filter Container tree diagram

   Above is a tree diagram for the filters container.  All objects
   contained in this tree are described within the included YANG model
   within Section 4.

3.3.  Subscriptions Container

   The "subscriptions" container maintains a list of all subscriptions
   on a publisher, both configured and dynamic.  It can be used to
   retrieve information about the subscriptions which a publisher is
   serving.

      +--rw subscriptions
         +--rw subscription* [identifier]
            +--rw identifier                       subscription-id
            +--ro configured-subscription-state?   enumeration
            |       {configured}?
            +--rw purpose?                         string {configured}?
            +--rw transport                        transport
            |       {configured}?
            +--rw encoding                         encoding
            +--rw (target)
            |  +--:(stream)
            |     +--rw (stream-filter)?
            |     |  +--:(by-reference)
            |     |  |  +--rw stream-filter-ref
            |     |  |          stream-filter-ref
            |     |  +--:(within-subscription)
            |     |     +--rw (filter-spec)?
            |     |        +--:(stream-subtree-filter)
            |     |        |  +--rw stream-subtree-filter?
            |     |        |          <anydata> {subtree}?
            |     |        +--:(stream-xpath-filter)
            |     |           +--rw stream-xpath-filter?
            |     |                   yang:xpath1.0 {xpath}?
            |     +--rw stream                           stream-ref
            |     +--rw replay-start-time?
            |             yang:date-and-time {replay}?



Voit, et al.           Expires September 19, 2018              [Page 29]

Internet-Draft          Subscribed Notifications              March 2018


            +--rw stop-time?                       yang:date-and-time
            +--rw dscp?                            inet:dscp {qos}?
            +--rw weighting?                       uint8 {qos}?
            +--rw dependency?                      subscription-id
            |       {qos}?
            +--rw (notification-message-origin)? {configured}?
            |  +--:(interface-originated)
            |  |  +--rw source-interface?
            |  |          if:interface-ref {interface-designation}?
            |  +--:(address-originated)
            |     +--rw source-vrf?
            |     |       -> /ni:network-instances/network-instance/name
            |     |       {supports-vrf}?
            |     +--rw source-address?
            |             inet:ip-address-no-zone
            +--rw receivers
               +--rw receiver* [address port]
                  +--rw address                   inet:host
                  +--rw port                      inet:port-number
                  +--ro pushed-notifications?     yang:counter64
                  +--ro excluded-notifications?   yang:counter64
                  +--ro state                     enumeration
                  +---x reset
                     +--ro output
                        +--ro time    yang:date-and-time


                        Subscriptions tree diagram

   Above is a tree diagram for the subscriptions container.  All objects
   contained in this tree are described within the included YANG model
   within Section 4.

4.  Data Model

<CODE BEGINS> file "ietf-subscribed-notifications@2018-03-21.yang"
module ietf-subscribed-notifications {
  yang-version 1.1;
  namespace
    "urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications";

  prefix sn;

  import ietf-yang-types {
    prefix yang;
    reference
       "RFC 6991: Common YANG Data Types";
  }



Voit, et al.           Expires September 19, 2018              [Page 30]

Internet-Draft          Subscribed Notifications              March 2018


  import ietf-inet-types {
     prefix inet;
     reference
       "RFC 6991: Common YANG Data Types";
  }
  import ietf-interfaces {
    prefix if;
    reference
       "RFC 7223: A YANG Data Model for Interface Management";
  }
  import ietf-network-instance {
    prefix ni;
    reference
       "draft-ietf-rtgwg-ni-model-11: YANG Model for Network Instances";
  }
  import ietf-restconf   {
    prefix rc;
    reference
       "RFC 8040 - RESTCONF Protocol";
  }

  organization "IETF NETCONF (Network Configuration) Working Group";
  contact
    "WG Web:   <http:/tools.ietf.org/wg/netconf/>
     WG List:  <mailto:netconf@ietf.org>

     Author:   Alexander Clemm
               <mailto:ludwig@clemm.org>

     Author:   Eric Voit
               <mailto:evoit@cisco.com>

     Author:   Alberto Gonzalez Prieto
               <mailto:agonzalezpri@vmware.com>

     Author:   Einar Nilsen-Nygaard
               <mailto:einarnn@cisco.com>

     Author:   Ambika Prasad Tripathy
               <mailto:ambtripa@cisco.com>";

  description
    "Contains a YANG specification for subscribing to event records
    and receiving matching content within notification messages.";

  revision 2018-03-21 {
    description
      "Initial version";



Voit, et al.           Expires September 19, 2018              [Page 31]

Internet-Draft          Subscribed Notifications              March 2018


    reference
    "RFC XXXX: Customized Subscriptions to a Publisher's Event Streams";
  }

  /*
   * FEATURES
   */

  feature encode-json {
    description
      "This feature indicates that JSON encoding of notification
       messages is supported.";
  }

  feature encode-xml {
    description
      "This feature indicates that XML encoding of notification
       messages is supported.";
  }

  feature configured {
    description
      "This feature indicates that configuration of subscription is
      supported.";
  }

  feature replay {
    description
      "This feature indicates that historical event record replay is
      supported.  With replay, it is possible for past event records to
      be streamed in chronological order.";
  }

  feature xpath {
    description
      "This feature indicates support for xpath filtering.";
    reference "http://www.w3.org/TR/1999/REC-xpath-19991116";
  }

  feature subtree {
    description
      "This feature indicates support for YANG subtree filtering.";
    reference "RFC 6241, Section 6.";
  }

  feature supports-vrf {
    description
      "This feature indicates a publisher supports VRF configuration



Voit, et al.           Expires September 19, 2018              [Page 32]

Internet-Draft          Subscribed Notifications              March 2018


      for configured subscriptions.  VRF support for dynamic
      subscriptions does not require this feature.";
    reference "draft-ietf-rtgwg-ni-model";
  }

  feature interface-designation {
    description
      "This feature indicates a publisher supports sourcing all receiver
      interactions for a configured subscription from a single
      designated egress interface.";
  }

  feature qos {
    description
      "This feature indicates a publisher supports one or more optional
      Quality of Service (QoS) features to differentiate update record
      treatment between publisher and receiver.";
  }

  /*
   * EXTENSIONS
   */

  extension subscription-state-notification {
    description
      "This statement applies only to notifications. It indicates that
       the notification is a subscription state notification. Therefore
       it does not participate in a regular event stream and does not
       need to be specifically subscribed to in order to be received.
       This statement can only occur as a substatement to the YANG
       'notification' statement.";
  }

  /*
   * IDENTITIES
   */

  /* Identities for RPC and Notification errors */

  identity establish-subscription-error {
     description
      "Problem found while attempting to fulfill an
      'establish-subscription' rpc request. ";
  }

  identity modify-subscription-error {
     description
      "Problem found while attempting to fulfill a



Voit, et al.           Expires September 19, 2018              [Page 33]

Internet-Draft          Subscribed Notifications              March 2018


      'modify-subscription' rpc request. ";
  }

  identity delete-subscription-error {
     description
      "Problem found while attempting to fulfill either a
      'delete-subscription' rpc request or a 'kill-subscription'
      rpc request. ";
  }

  identity subscription-terminated-reason {
     description
      "Problem condition communicated to a receiver as part of a
      'subscription-terminated' notification. ";
  }

  identity subscription-suspended-reason {
     description
      "Problem condition communicated to a receiver as part of a
      'subscription-terminated' notification. ";
  }

  identity dscp-unavailable {
    base establish-subscription-error;
    description
      "Requested DSCP marking not allocatable.";
  }

  identity filter-unavailable {
    base subscription-terminated-reason;
    description
     "Referenced filter does not exist.  This means a receiver is
     referencing a filter which doesn't exist, or to which they do not
     have access permissions.";
  }

  identity filter-unsupported {
    base establish-subscription-error;
    base modify-subscription-error;
    description
     "Cannot parse syntax within the filter.  This failure can be from
     a syntax error, or a syntax too complex to be processed by the
     publisher.";
  }

  identity history-unavailable {
    base establish-subscription-error;
    description



Voit, et al.           Expires September 19, 2018              [Page 34]

Internet-Draft          Subscribed Notifications              March 2018


     "Replay request too far into the past. This means the publisher
      does store historic information for the requested stream, but
      not back to the requested timestamp.";
  }

  identity insufficient-resources {
    base establish-subscription-error;
    base modify-subscription-error;
    base subscription-suspended-reason;
    description
      "The publisher has insufficient resources to support the
       requested subscription.  An example might be that allocated CPU
       is too limited to generate the desired set of notification
       messages.";
  }

  identity no-such-subscription {
    base modify-subscription-error;
    base delete-subscription-error;
    base subscription-terminated-reason;
    description
     "Referenced subscription doesn't exist. This may be as a result of
      a non-existent subscription ID, an ID which belongs to another
      subscriber, or an ID for configured subscription.";
  }

  identity replay-unsupported {
    base establish-subscription-error;
    description
     "Replay cannot be performed for this subscription. This means the
      publisher will not provide the requested historic information from
      the stream via replay to this receiver.";
  }

  identity stream-unavailable {
    base subscription-terminated-reason;
    description
     "Not a subscribable stream.  This means the referenced stream is
      not available for subscription by the receiver.";
  }

  identity suspension-timeout {
    base subscription-terminated-reason;
    description
     "Termination of previously suspended subscription. The publisher
      has eliminated the subscription as it exceeded a time limit for
      suspension.";
  }



Voit, et al.           Expires September 19, 2018              [Page 35]

Internet-Draft          Subscribed Notifications              March 2018


  identity unsupportable-volume {
    base subscription-suspended-reason;
    description
      "The publisher does not have the network bandwidth needed to get
      the volume of generated information intended for a receiver.";
  }

  /* Identities for encodings */
  identity encoding {
    description
      "Base identity to represent data encodings";
  }

  identity encode-xml {
    base encoding;
    if-feature "encode-xml";
    description
      "Encode data using XML as described in RFC 7950";
    reference
      "RFC 7950 - The YANG 1.1 Data Modeling Language";
  }

  identity encode-json {
    base encoding;
    if-feature "encode-json";
    description
      "Encode data using JSONas described in RFC 7951";
    reference
      "RFC 7951 - JSON Encoding of Data Modeled with YANG";
  }

  /* Identities for transports */
  identity transport {
    description
      "An identity that represents a the underlying mechanism for
      passing notification messages.";
  }

  identity netconf {
    base transport;
    description
      "Netconf is used a transport for notification messages and state
       change notifications.";
    reference "draft-ietf-netconf-netconf-event-notifications";
  }

  identity http2 {
    base transport;



Voit, et al.           Expires September 19, 2018              [Page 36]

Internet-Draft          Subscribed Notifications              March 2018


    description
      "HTTP2 is used a transport for notification messages and state
       change notifications.";
    reference "draft-ietf-netconf-restconf-notif-03, Sections 3.1.1" +
      "3.1.3";
  }

  identity http1.1 {
    base transport;
    description
      "HTTP1.1 is used a transport for notification messages and state
       change notifications.";
    reference "draft-ietf-netconf-restconf-notif-03, Section 3.1.2";
  }

  /*
   * TYPEDEFs
   */

  typedef subscription-id {
    type uint32;
    description
      "A type for subscription identifiers.";
  }

  typedef filter-id {
    type string;
    description
      "A type to identify filters which can be associated with a
       subscription.";
  }

  typedef encoding {
    type identityref {
      base encoding;
    }
    description
      "Specifies a data encoding, e.g. for a data subscription.";
  }

  typedef transport {
    type identityref {
      base transport;
    }
    description
      "Specifies transport used to send notification messages to a
       receiver.";
  }



Voit, et al.           Expires September 19, 2018              [Page 37]

Internet-Draft          Subscribed Notifications              March 2018


  typedef stream-ref {
    type leafref {
      path "/sn:streams/sn:stream/sn:name";
    }
    description
      "This type is used to reference a system-provided stream.";
  }

  typedef stream-filter-ref {
    type leafref {
      path "/sn:filters/sn:stream-filter/sn:identifier";
    }
    description
      "This type is used to reference a stream filter.";
  }

  /*
   * GROUPINGS
   */

  grouping stream-filter-elements {
    description
      "This grouping defines the base for filters applied to event
       streams.";
    choice filter-spec {
      description
        "The content filter specification for this request.";
      anydata stream-subtree-filter {
        if-feature "subtree";
        description
          "Event stream evaluation criteria encoded in the syntax of a
          subtree filter as defined in RFC 6241, Section 6.

          The subtree filter is applied to the representation of
          individual, delineated event records as contained within the
          event stream.  For example, if the notification message
          contains an instance of a notification defined in YANG, then
          the top-level element is the name of the YANG notification.

          If the subtree filter returns a non-empty node set, the filter
          matches the event record, and the it is included in the
          notification message sent to the receivers.";
        reference "RFC 6241, Section 6.";
      }
      leaf stream-xpath-filter {
        if-feature "xpath";
        type yang:xpath1.0;
        description



Voit, et al.           Expires September 19, 2018              [Page 38]

Internet-Draft          Subscribed Notifications              March 2018


          "Event stream evaluation criteria encoded in the syntax of
           an XPath 1.0 expression.

           The XPath expression is evaluated on the representation of
           individual, delineated event records as contained within
           the event stream.  For example, if the notification message
           contains an instance of a notification defined in YANG,
           then the top-level element is the name of the YANG
           notification, and the root node has this top-level element
           as the only child.

           The result of the XPath expression is converted to a
           boolean value using the standard XPath 1.0 rules.  If the
           boolean value is 'true', the filter matches the event
           record, and the it is included in the notification message
           sent to the receivers.

           The expression is evaluated in the following XPath context:

             o  The set of namespace declarations are those in scope on
                the 'xpath-filter' leaf element

             o  The set of variable bindings is empty.

             o  The function library is the core function library, and
                the XPath functions defined in section 10 in RFC 7950.

             o  The context node is the root node.";
        reference
          "http://www.w3.org/TR/1999/REC-xpath-19991116
           RFC 7950, Section 10.";

      }
    }
  }

  grouping update-qos {
    description
      "This grouping describes Quality of Service information
       concerning a subscription.  This information is passed to lower
       layers for transport prioritization and treatment";
    leaf dscp {
      if-feature "qos";
      type inet:dscp;
      default "0";
      description
        "The push update's IP packet transport priority. This is made
         visible across network hops to receiver. The transport



Voit, et al.           Expires September 19, 2018              [Page 39]

Internet-Draft          Subscribed Notifications              March 2018


         priority is shared for all receivers of a given subscription.";
    }
    leaf weighting {
      if-feature "qos";
      type uint8 {
         range "0 .. 255";
      }
      description
        "Relative weighting for a subscription. Allows an underlying
         transport layer perform informed load balance allocations
         between various subscriptions";
      reference
        "RFC-7540, section 5.3.2";
    }
    leaf dependency {
      if-feature "qos";
      type subscription-id;
      description
        "Provides the Subscription ID of a parent subscription which
         has absolute priority should that parent have push updates
         ready to egress the publisher. In other words, there should be
         no streaming of objects from the current subscription if
         the parent has something ready to push.

         If a dependency is asserted via configuration or via RPC, but
         the referenced subscription-id does not exist, the dependency
         is silently discarded.  If a referenced subscription is deleted
         this dependency is removed.";
      reference
        "RFC-7540, section 5.3.1";
    }
  }

  grouping subscription-policy-modifiable {
    description
      "This grouping describes all objects which may be changed
      in a subscription via an RPC.";
    choice target {
      mandatory true;
      description
        "Identifies the source of information against which a
        subscription is being applied, as well as specifics on the
        subset of information desired from that source.";
      case stream {
        choice stream-filter {
          description
            "An event stream filter can be applied to a subscription.
            That filter will come either referenced from a global list,



Voit, et al.           Expires September 19, 2018              [Page 40]

Internet-Draft          Subscribed Notifications              March 2018


            or be provided within the subscription itself.";
          case by-reference {
            description
              "Apply a filter that has been configured separately.";
            leaf stream-filter-ref {
              type stream-filter-ref;
              mandatory true;
              description
                "References an existing stream-filter which is to
                be applied to stream for the subscription.";
            }
          }
          case within-subscription {
            description
              "Local definition allows a filter to have the same
              lifecycle as the subscription.";
            uses stream-filter-elements;
          }
        }
      }
    }
    leaf stop-time {
      type yang:date-and-time;
      description
        "Identifies a time after which notification messages for a
        subscription should not be sent.  If stop-time is not present,
        the notification messages will continue until the subscription
        is terminated.  If replay-start-time exists, stop-time must be
        for a subsequent time. If replay-start-time doesn't exist,
        stop-time must be for a future time.";
    }
  }

  grouping subscription-policy-dynamic {
    description
      "This grouping describes information concerning a subscription
      which can just be passed over the RPCs defined in this model.";
    leaf encoding {
      type encoding;
      mandatory true;
      description
        "The type of encoding for the subscribed data.";
    }
    uses subscription-policy-modifiable {
      augment target/stream {
        description
          "Adds additional objects which can be modified by RPC.";
        leaf stream {



Voit, et al.           Expires September 19, 2018              [Page 41]

Internet-Draft          Subscribed Notifications              March 2018


          type stream-ref {
            require-instance false;
          }
          mandatory true;
          description
            "Indicates the stream of event records to be considered for
            this subscription.";
        }
        leaf replay-start-time {
          if-feature "replay";
          type yang:date-and-time;
          description
            "Used to trigger the replay feature and indicate that the
            replay should start at the time specified.  If
            replay-start-time is not present, this is not a replay
            subscription and event record push should start immediately.
            It is never valid to specify start times that are later than
            or equal to the current time.";
        }
      }
    }
    uses update-qos;
  }

  grouping subscription-policy {
    description
      "This grouping describes the full set of policy information
      concerning both dynamic and configured subscriptions, except for
      configured receivers.";
    leaf transport {
      if-feature "configured";
      type transport;
      mandatory true;
      description
        "This leaf specifies the transport used to deliver
        messages destined to all receivers of a subscription.";
    }
    uses subscription-policy-dynamic;
  }


  /*
   * RPCs
   */

  rpc establish-subscription {
    description
      "This RPC allows a subscriber to create (and possibly negotiate)



Voit, et al.           Expires September 19, 2018              [Page 42]

Internet-Draft          Subscribed Notifications              March 2018


       a subscription on its own behalf.  If successful, the
       subscription remains in effect for the duration of the
       subscriber's association with the publisher, or until the
       subscription is terminated. In case an error occurs, or the
       publisher cannot meet the terms of a subscription, and RPC error
       is returned, the subscription is not created.  In that case, the
       RPC reply's error-info MAY include suggested parameter settings
       that would have a higher likelihood of succeeding in a subsequent
       establish-subscription request.";
    input {
      uses subscription-policy-dynamic {
        refine "encoding" {
          mandatory false;
          description
            "The type of encoding for the subscribed data. If not
            included as part of the RPC, the encoding MUST be set by the
            publisher to be the encoding used by this RPC.";
        }
      }
    }
    output {
      leaf identifier {
        type subscription-id;
        mandatory true;
        description
          "Identifier used for this subscription.";
      }
    }
  }

  rc:yang-data establish-subscription-error-stream {
    container establish-subscription-error-stream {
      description
        "If any 'establish-subscription' RPC parameters are
        unsupportable against the event stream, a subscription is not
        created and the RPC error response MUST indicate the reason
        why the subscription failed to be created. This yang-data MAY be
        inserted as structured data within a subscription's RPC error
        response to indicate the failure reason.  This yang-data MUST be
        inserted if hints are to be provided back to the subscriber.";
      leaf reason {
        type identityref {
          base establish-subscription-error;
        }
        description
          "Indicates the reason why the subscription has failed to
          be created to a targeted stream.";
        }



Voit, et al.           Expires September 19, 2018              [Page 43]

Internet-Draft          Subscribed Notifications              March 2018


      leaf filter-failure-hint {
        type string;
          description
            "Information describing where and/or why a provided filter
             was unsupportable for a subscription.";
      }
      leaf replay-start-time-hint {
        type yang:date-and-time;
          description
            "If a replay has been requested, but the requested replay
            time cannot be honored, this may provide a hint at an
            alternate time which may be supportable.";
      }
    }
  }

  rpc modify-subscription {
    description
      "This RPC allows a subscriber to modify a dynamic subscription's
       parameters.  If successful, the changed subscription
       parameters remain in effect for the duration of the subscription,
       until the subscription is again modified, or until the
       subscription is terminated.  In case of an error or an inability
       to meet the modified parameters, the subscription is not modified
       and the original subscription parameters remain in effect.
       In that case, the rpc error MAY include error-info suggested
       parameter hints that would have a high likelihood of succeeding
       in a subsequent modify-subscription request.  A successful
       modify-subscription will return a suspended subscription to an
       active state.";
    input {
      leaf identifier {
        type subscription-id;
        mandatory true;
        description
          "Identifier to use for this subscription.";
      }
      uses subscription-policy-modifiable;
    }
  }

  rc:yang-data modify-subscription-error-stream {
    container modify-subscription-error-stream {
      description
        "This yang-data MAY be provided as part of a subscription's RPC
        error response when there is a failure of a
        'modify-subscription' RPC which has been made against a
        stream.  This yang-data MUST be used if hints are to be



Voit, et al.           Expires September 19, 2018              [Page 44]

Internet-Draft          Subscribed Notifications              March 2018


        provides back to the subscriber.";
      leaf reason {
        type identityref {
          base modify-subscription-error;
        }
        description
          "Information in a modify-subscription RPC error response which
          indicates the reason why the subscription to an event stream
          has failed to be modified.";
      }
      leaf filter-failure-hint {
        type string;
          description
            "Information describing where and/or why a provided filter
             was unsupportable for a subscription.";
      }
    }
  }

  rpc delete-subscription {
    description
      "This RPC allows a subscriber to delete a subscription that
       was previously created from by that same subscriber using the
       establish-subscription RPC.

       If an error occurs, the server replies with an 'rpc-error' where
       the 'error-info' field MAY contain an 'delete-subscription-error'
       structure.";
    input {
      leaf identifier {
        type subscription-id;
        mandatory true;
        description
          "Identifier of the subscription that is to be deleted.
           Only subscriptions that were created using
           establish-subscription can be deleted via this RPC.";
      }
    }
  }

  rpc kill-subscription {
    description
      "This RPC allows an operator to delete a dynamic subscription
       without restrictions on the originating subscriber or underlying
       transport session.

       If an error occurs, the server replies with an 'rpc-error' where
       the 'error-info' field MAY contain an 'delete-subscription-error'



Voit, et al.           Expires September 19, 2018              [Page 45]

Internet-Draft          Subscribed Notifications              March 2018


       structure.";
    input {
      leaf identifier {
        type subscription-id;
        mandatory true;
        description
          "Identifier of the subscription that is to be deleted. Only
            subscriptions that were created using establish-subscription
           can be deleted via this RPC.";
      }
    }
  }

  rc:yang-data delete-subscription-error {
    container delete-subscription-error {
      description
        "If a 'delete-subscription' RPC or a 'kill-subscription' RPC
        fails, the subscription is not deleted and the RPC error
        response MUST indicate the reason for this failure. This
        yang-data MAY be inserted as structured data within a
        subscription's RPC error response to indicate the failure
        reason.";
      leaf reason {
        type identityref {
          base delete-subscription-error;
        }
        mandatory true;
        description
          "Indicates the reason why the subscription has failed to be
          deleted.";
      }
    }
  }

  /*
   * NOTIFICATIONS
   */

  notification replay-completed {
    sn:subscription-state-notification;
    if-feature "replay";
    description
      "This notification is sent to indicate that all of the replay
        notifications have been sent. It must not be sent for any other
       reason.";
    leaf identifier {
      type subscription-id;
      mandatory true;



Voit, et al.           Expires September 19, 2018              [Page 46]

Internet-Draft          Subscribed Notifications              March 2018


      description
        "This references the affected subscription.";
    }
  }

  notification subscription-completed {
    sn:subscription-state-notification;
    description
      "This notification is sent to indicate that a subscription has
       finished passing event records, as the stop-time has been
       reached.";
    leaf identifier {
      type subscription-id;
      mandatory true;
      description
        "This references the gracefully completed subscription.";
    }
  }

  notification subscription-started {
    sn:subscription-state-notification;
    if-feature "configured";
    description
      "This notification indicates that a subscription has started and
        notifications are beginning to be sent. This notification shall
       only be sent to receivers of a subscription; it does not
       constitute a general-purpose notification.";
    leaf identifier {
      type subscription-id;
      mandatory true;
      description
        "This references the affected subscription.";
    }
    uses subscription-policy {
      refine "target/stream/replay-start-time" {
         description
           "Indicates the time that a replay using for the streaming of
           buffered event records.  This will be populated with the most
           recent of the following: replay-log-creation-time,
           replay-log-aged-time, replay-start-time, or the most recent
           publisher boot time.";
      }
      refine "target/stream/stream-filter/within-subscription" {
        description
          "Filter applied to the subscription.  If the
          'stream-filter-ref' is populated, the filter within the
          subscription came from the 'filters' container.  Otherwise it
          is populated in-line as part of the subscription.";



Voit, et al.           Expires September 19, 2018              [Page 47]

Internet-Draft          Subscribed Notifications              March 2018


      }
    }
  }

  notification subscription-resumed {
    sn:subscription-state-notification;
    description
      "This notification indicates that a subscription that had
       previously been suspended has resumed. Notifications will once
       again be sent.  In addition, a subscription-resumed indicates
       that no modification of parameters has occurred since the last
       time event records have been sent.";
    leaf identifier {
      type subscription-id;
      mandatory true;
      description
        "This references the affected subscription.";
    }
  }

  notification subscription-modified {
    sn:subscription-state-notification;
    description
      "This notification indicates that a subscription has been
       modified.  Notification messages sent from this point on will
       conform to the modified terms of the subscription.  For
       completeness, this state change notification includes both
       modified and non-modified aspects of a subscription.";
    leaf identifier {
      type subscription-id;
      mandatory true;
      description
        "This references the affected subscription.";
    }
    uses subscription-policy {
      refine "target/stream/stream-filter/within-subscription" {
        description
          "Filter applied to the subscription.  If the
          'stream-filter-ref' is populated, the filter within the
          subscription came from the 'filters' container.  Otherwise it
          is populated in-line as part of the subscription.";
      }
    }
  }

  notification subscription-terminated {
    sn:subscription-state-notification;
    description



Voit, et al.           Expires September 19, 2018              [Page 48]

Internet-Draft          Subscribed Notifications              March 2018


      "This notification indicates that a subscription has been
       terminated.";
    leaf identifier {
      type subscription-id;
      mandatory true;
      description
        "This references the affected subscription.";
    }
    leaf reason {
      type identityref {
        base subscription-terminated-reason;
      }
      mandatory true;
      description
        "Identifies the condition which resulted in the termination .";
    }
  }

  notification subscription-suspended {
    sn:subscription-state-notification;
    description
      "This notification indicates that a suspension of the
       subscription by the publisher has occurred.  No further
       notifications will be sent until the subscription resumes.
       This notification shall only be sent to receivers of a
       subscription; it does not constitute a general-purpose
       notification.";
    leaf identifier {
      type subscription-id;
      mandatory true;
      description
        "This references the affected subscription.";
    }
    leaf reason {
      type identityref {
        base subscription-suspended-reason;
      }
      mandatory true;
      description
        "Identifies the condition which resulted in the suspension.";
    }
  }

  /*
   * DATA NODES
   */

  container streams {



Voit, et al.           Expires September 19, 2018              [Page 49]

Internet-Draft          Subscribed Notifications              March 2018


    config false;
    description
      "This container contains information on the built-in streams
      provided by the publisher.";
    list stream {
      key "name";
      description
        "Identifies the built-in streams that are supported by the
         publisher.";
      leaf name {
        type string;
        description
          "A handle for a system-provided stream made up of a
          sequential set of event records, each of which is
          characterized by its own domain and semantics.";
      }
      leaf description {
        type string;
        mandatory true;
        description
          "A description of the event stream, including such information
           as the type of event records that are available within this
           stream.";
      }
      leaf replay-support {
        if-feature "replay";
        type empty;
        description
          "Indicates that event record replay is available on this
          stream.";
      }
      leaf replay-log-creation-time {
        if-feature "replay";
        type yang:date-and-time;
        description
          "The timestamp of the creation of the log used to support the
          replay function on this stream. Note that this might be
          earlier then the earliest available information contained in
          the log. This object is updated if the log resets for some
          reason. This object MUST be present if replay is supported.";
      }
      leaf replay-log-aged-time {
        if-feature "replay";
        type yang:date-and-time;
        description
          "The timestamp of the last event record aged out of the log.
          This object MUST be present if replay is supported and any
          event record have been aged out of the log.";



Voit, et al.           Expires September 19, 2018              [Page 50]

Internet-Draft          Subscribed Notifications              March 2018


      }
    }
  }

  container filters {
    description
      "This container contains a list of configurable filters
       that can be applied to subscriptions.  This facilitates
       the reuse of complex filters once defined.";
    list stream-filter {
      key "identifier";
      description
        "A list of pre-configured filters that can be applied to
        subscriptions.";
      leaf identifier {
        type filter-id;
        description
          "An identifier to differentiate between filters.";
      }
      uses stream-filter-elements;
    }
  }

  container subscriptions {
    description
      "Contains the list of currently active subscriptions, i.e.
       subscriptions that are currently in effect, used for subscription
       management and monitoring purposes. This includes subscriptions
       that have been setup via RPC primitives as well as subscriptions
       that have been established via configuration.";
    list subscription {
      key "identifier";
      description
        "The identity and specific parameters of a subscription.
         Subscriptions within this list can be created using a control
         channel or RPC, or be established through configuration.

         If configuration operations or the 'kill-subscription' rpc are
         used to delete a subscription, a 'subscription-terminated'
         message is sent to any ACTIVE or SUSPENDED receivers.";
      leaf identifier {
        type subscription-id;
        description
          "Identifier of a subscription; unique within a publisher";
      }
      leaf configured-subscription-state {
        if-feature "configured";
        type enumeration {



Voit, et al.           Expires September 19, 2018              [Page 51]

Internet-Draft          Subscribed Notifications              March 2018


          enum valid {
            value 1;
            description
              "Connection is active and healthy.";
          }
          enum invalid {
            value 2;
            description
              "The subscription as a whole is unsupportable with its
              current parameters.";
          }
          enum concluded {
            value 3;
              description
                "A subscription is inactive as it has hit a stop time,
                but not yet been removed from configuration.";
          }
        }
        config false;
        description
          "The presence of this leaf indicates that the subscription
          originated from configuration, not through a control channel
          or RPC.  The value indicates the system established state
          of the subscription.";
      }
      leaf purpose {
        if-feature "configured";
        type string;
        description
          "Open text allowing a configuring entity to embed the
          originator or other specifics of this subscription.";
      }
      uses subscription-policy {
        refine "target/stream/stream" {
          description
            "Indicates the stream of event records to be considered for
            this subscription.   If a stream has been removed, and no
            longer can be referenced by an active subscription, send a
            'subscription-terminated' notification with
            'stream-unavailable' as the reason.  If a configured
            subscription refers to a non-existent stream, move that
            subscription to the 'invalid' state.";
        }
      }
      choice notification-message-origin {
        if-feature "configured";
        description
          "Identifies the egress interface on the Publisher from which



Voit, et al.           Expires September 19, 2018              [Page 52]

Internet-Draft          Subscribed Notifications              March 2018


           notification messages are to be sent.";
        case interface-originated {
          description
            "When notification messages to egress a specific, designated
             interface on the Publisher.";
          leaf source-interface {
            if-feature "interface-designation";
            type if:interface-ref;
            description
              "References the interface for notification messages.";
          }
        }
        case address-originated {
          description
            "When notification messages are to depart from a publisher
             using specfic originating address and/or routing context
             information.";
          leaf source-vrf {
            if-feature "supports-vrf";
            type leafref {
              path "/ni:network-instances/ni:network-instance/ni:name";
            }
            description
              "VRF from which notification messages should egress a
              publisher.";
          }
          leaf source-address {
            type inet:ip-address-no-zone;
            description
              "The source address for the notification messages.  If a
              source VRF exists, but this object doesn't, a publisher's
              default address for that VRF must be used.";
          }
        }
      }
      container receivers {
        description
          "Set of receivers in a subscription.";
        list receiver {
          key "address port";
          min-elements 1;
          description
            "A single host or multipoint address intended as a target
             for the notification messages of a subscription.";
          leaf address {
            type inet:host;
            description
              "Specifies the address for the traffic to reach a remote



Voit, et al.           Expires September 19, 2018              [Page 53]

Internet-Draft          Subscribed Notifications              March 2018


              host. One of the following must be specified: an ipv4
              address, an ipv6 address, or a host name.";
          }
          leaf port {
            type inet:port-number;
            description
              "This leaf specifies the port number to use for messages
               destined for a receiver.";
          }
          leaf pushed-notifications {
            type yang:counter64;
            config false;
            description
              "Operational data which provides the number of update
               notification messages pushed to a receiver.";
          }
          leaf excluded-notifications {
            type yang:counter64;
            config false;
            description
              "Operational data which provides the number of event
               records from a stream explicitly removed either via a
               stream filter or an access control filter so that they
               are not passed to a receiver.";
          }
          leaf state {
            type enumeration {
              enum active {
                value 1;
                description
                  "Receiver is currently being sent any applicable
                  notification messages for the subscription.";
            }
            enum suspended {
              value 2;
              description
                "Receiver state is suspended, so the publisher
                is currently unable to provide notification messages
                for the subscription.";
            }
            enum connecting {
              value 3;
              if-feature "configured";
              description
                "A subscription has been configured, but a
                subscription-started state change notification needs
                to be successfully received before notification
                messages are sent.



Voit, et al.           Expires September 19, 2018              [Page 54]

Internet-Draft          Subscribed Notifications              March 2018


                If the 'reset' action is invoked for a receiver of an
                active configured subscription, the state must be
                moved to connecting.";
            }
            enum timeout {
              value 4;
              if-feature "configured";
              description
                "A subscription has failed in sending a subscription
                started state change to the receiver.
                Additional attempts at connection attempts are not
                currently being made.";
            }
          }
          config false;
          mandatory true;
          description
            "Specifies the state of a subscription from the
            perspective of a particular receiver.  With this info it
            is possible to determine whether a subscriber is currently
            generating notification messages intended for that
            receiver.";
          }
          action reset {
            description
              "Allows the reset of this configured subscription receiver
              to the 'connecting' state. This enables the
              connection process to be re-initiated.";
            output {
              leaf time {
                type yang:date-and-time;
                mandatory true;
                description
                  "Time a publisher returned the receiver to a
                  connecting state.";
              }
            }
          }
        }
      }
    }
  }
}
<CODE ENDS>







Voit, et al.           Expires September 19, 2018              [Page 55]

Internet-Draft          Subscribed Notifications              March 2018


5.  Considerations

5.1.  Implementation Considerations

   To support deployments including both configured and dynamic
   subscriptions, it is recommended to split subscription identifiers
   into static and dynamic halves.  That way it eliminates the
   possibility of collisions if the configured subscriptions attempt to
   set a subscription-id which might have already been dynamically
   allocated.  A best practice is to use lower half the "identifier"
   object's integer space when that "identifier" is assigned by an
   external entity (such as with a configured subscription).  This
   leaves the upper half of subscription identifiers available to be
   dynamically assigned by the publisher.

   An implementation may choose to transition between active and
   suspended subscription states more frequently than required by this
   specification.  However if a subscription is unable to marshal all
   intended updates into a transmittable message in multiple successive
   intervals, the subscription should be suspended with the reason
   "unsupportable-volume".

   For configured subscriptions, operations are against the set of
   receivers using the subscription identifier as a handle for that set.
   But for streaming updates, state change notifications are local to a
   receiver.  In this specification it is the case that receivers get no
   information from the publisher about the existence of other
   receivers.  But if an operator wants to let the receivers correlate
   results, it is useful to use the subscription identifier handle
   across the receivers to allow that correlation.

5.2.  IANA Considerations

   This document registers the following namespace URI in the "IETF XML
   Registry" [RFC3688]:

   URI: urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications
   Registrant Contact: The IESG.
   XML: N/A; the requested URI is an XML namespace.

   This document registers the following YANG module in the "YANG Module
   Names" registry [RFC6020]:

   Name: ietf-subscribed-notifications
   Namespace: urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications
   Prefix: sn
   Reference: draft-ietf-netconf-ietf-subscribed-notifications-11.txt
   (RFC form)



Voit, et al.           Expires September 19, 2018              [Page 56]

Internet-Draft          Subscribed Notifications              March 2018


5.3.  Security Considerations

   The YANG module specified in this document defines a schema for data
   that is designed to be accessed via network management transports
   such as NETCONF [RFC6241] or RESTCONF [RFC8040].  The lowest NETCONF
   layer is the secure transport layer, and the mandatory-to-implement
   secure transport is Secure Shell (SSH) [RFC6242].  The lowest
   RESTCONF layer is HTTPS, and the mandatory-to-implement secure
   transport is TLS [RFC5246].

   The NETCONF Access Control Model (NACM) [RFC8341] provides the means
   to restrict access for particular NETCONF or RESTCONF users to a
   preconfigured subset of all available NETCONF or RESTCONF operations
   and content.

   There are a number of data nodes defined in this YANG module that are
   writable/creatable/deletable (i.e., config true, which is the
   default).  These data nodes may be considered sensitive or vulnerable
   in some network environments.  Write operations (e.g., edit-config)
   to these data nodes without proper protection can have a negative
   effect on network operations.  These are the subtrees and data nodes
   and their sensitivity/vulnerability:

   Container: filters

   o  stream-subtree-filter: updating a filter could increase the
      computational complexity of all referencing subscriptions.

   o  stream-xpath-filter: updating a filter could increase the
      computational complexity of all referencing subscriptions.

   Container: subscriptions

   o  address: can be used to attempt to send traffic to an unwilling
      receiver.

   o  dependency: can force important traffic to wait behind the
      unimportant.

   o  dscp: can send traffic with a higher priority marking that
      warranted.

   o  encoding: none

   o  identifier: can overwrite an existing subscription configured by
      another entity.

   o  port: none



Voit, et al.           Expires September 19, 2018              [Page 57]

Internet-Draft          Subscribed Notifications              March 2018


   o  transport: none

   o  purpose: none

   o  replay-start-time: can be used to push very large logs, wasting
      resources.

   o  source-address: address might not be able to reach a receiver.

   o  source-interface: interface might not be able to reach a receiver.

   o  source-vrf: can push subscribed traffic into a virtual network
      which might not contain receivers able to see the subscribed
      content.

   o  stop-time: none

   o  stream: none

   o  stream-filter-ref: none

   o  stream-subtree-filter: a complex filter can increase the
      computational resources for this subscription.

   o  stream-xpath-filter: a complex filter can increase the
      computational resources for this subscription.

   o  weighting: placing a large weight can overwhelm the dequeuing of
      other subscriptions.

   Some of the readable data nodes in this YANG module may be considered
   sensitive or vulnerable in some network environments.  It is thus
   important to control read access (e.g., via get, get-config, or
   notification) to these data nodes.  These are the subtrees and data
   nodes and their sensitivity/vulnerability:

   Container: streams

   o  name: if access control is not properly configured, can expose
      system internals to those who should have no access to this
      information.

   o  replay-support: if access control is not properly configured, can
      expose logs to those who should have no access.

   Container: subscriptions





Voit, et al.           Expires September 19, 2018              [Page 58]

Internet-Draft          Subscribed Notifications              March 2018


   o  pushed-notifications: will show the amount of events a particular
      subscriber actually received from a stream.

   o  excluded-notifications: will show the results of access control,
      and how many event records have been filtered out.

   Some of the RPC operations in this YANG module may be considered
   sensitive or vulnerable in some network environments.  It is thus
   important to control access to these operations.  These are the
   operations and their sensitivity/vulnerability:

   RPC: all

   o  If a malicious or buggy subscriber sends an unexpectedly large
      number of RPCs, the result might be an excessive use of system
      resources on the publisher just to determine that these
      subscriptions should be declined.  In such a situation,
      subscription interactions MAY be terminated by terminating the
      transport session.

   RPC: delete-subscription

   o  No special considerations.

   RPC: establish-subscription

   o  Subscriptions could overload a publisher's resources.  For this
      reason, Publishers MUST ensure that they have sufficient resources
      to fulfill this request or otherwise reject the request.

   RPC: kill-subscription

   o  The "kill-subscription" RPC MUST be secured so that only
      connections with administrative rights are able to invoke this
      RPC.

   RPC: modify-subscription

   o  Subscriptions could overload a publisher's resources.  For this
      reason, Publishers MUST ensure that they have sufficient resources
      to fulfill this request or otherwise reject the request.

   For both configured and dynamic subscriptions the publisher MUST
   authenticate and authorize a receiver via some transport level
   mechanism before sending any updates.

   A secure transport is highly recommended and the publisher MUST
   ensure that the receiver has sufficient authorization to perform the



Voit, et al.           Expires September 19, 2018              [Page 59]

Internet-Draft          Subscribed Notifications              March 2018


   function they are requesting against the specific subset of content
   involved.

   With configured subscriptions, one or more publishers could be used
   to overwhelm a receiver.  Notification messages SHOULD NOT be sent to
   any receiver which does not support this specification.  Receivers
   that do not want notification messages need only terminate or refuse
   any transport sessions from the publisher.

   One subscription id can be used for two or more receivers of the same
   configured subscription.  But due to the possibility of different
   access control permissions per receiver, it cannot be assumed that
   each receiver is getting identical updates.

6.  Acknowledgments

   For their valuable comments, discussions, and feedback, we wish to
   acknowledge Andy Bierman, Tim Jenkins, Martin Bjorklund, Kent Watsen,
   Balazs Lengyel, Robert Wilton, Sharon Chisholm, Hector Trevino, Susan
   Hares, Michael Scharf, and Guangying Zheng.

7.  References

7.1.  Normative References

   [I-D.draft-ietf-netmod-revised-datastores]
              Bjorklund, M., Schoenwaelder, J., Shafer, P., Watsen, K.,
              and R. Wilton, "Network Management Datastore
              Architecture", draft-ietf-netmod-revised-datastores-10
              (work in progress), February 2018.

   [I-D.draft-ietf-rtgwg-ni-model]
              Berger, L., Hopps, C., and A. Lindem, "YANG Network
              Instances", draft-ietf-rtgwg-ni-model-06 (work in
              progress), January 2018.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC3688]  Mealling, M., "The IETF XML Registry", BCP 81, RFC 3688,
              DOI 10.17487/RFC3688, January 2004,
              <https://www.rfc-editor.org/info/rfc3688>.

   [RFC5277]  Chisholm, S. and H. Trevino, "NETCONF Event
              Notifications", RFC 5277, DOI 10.17487/RFC5277, July 2008,
              <https://www.rfc-editor.org/info/rfc5277>.



Voit, et al.           Expires September 19, 2018              [Page 60]

Internet-Draft          Subscribed Notifications              March 2018


   [RFC6020]  Bjorklund, M., Ed., "YANG - A Data Modeling Language for
              the Network Configuration Protocol (NETCONF)", RFC 6020,
              DOI 10.17487/RFC6020, October 2010,
              <https://www.rfc-editor.org/info/rfc6020>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8341]  Bierman, A. and M. Bjorklund, "Network Configuration
              Access Control Model", STD 91, RFC 8341,
              DOI 10.17487/RFC8341, March 2018,
              <https://www.rfc-editor.org/info/rfc8341>.

   [XPATH]    Clark, J. and S. DeRose, "XML Path Language (XPath)
              Version 1.0", November 1999,
              <http://www.w3.org/TR/1999/REC-xpath-19991116>.

7.2.  Informative References

   [I-D.draft-ietf-netconf-netconf-event-notifications]
              Clemm, Alexander., Voit, Eric., Gonzalez Prieto, Alberto.,
              Nilsen-Nygaard, E., Tripathy, A., Chisholm, S., and H.
              Trevino, "NETCONF support for event notifications",
              October 2017, <https://datatracker.ietf.org/doc/
              draft-ietf-netconf-netconf-event-notifications/>.

   [I-D.draft-ietf-netconf-restconf-notif]
              Voit, Eric., Clemm, Alexander., Tripathy, A., Nilsen-
              Nygaard, E., and Alberto. Gonzalez Prieto, "Restconf and
              HTTP transport for event notifications", January 2018,
              <https://datatracker.ietf.org/doc/
              draft-ietf-netconf-restconf-notif/>.

   [I-D.ietf-netconf-yang-push]
              Clemm, Alexander., Voit, Eric., Gonzalez Prieto, Alberto.,
              Tripathy, A., Nilsen-Nygaard, E., Bierman, A., and B.
              Lengyel, "YANG Datastore Subscription", December 2017,
              <https://datatracker.ietf.org/doc/
              draft-ietf-netconf-yang-push/>.

   [I-D.ietf-netmod-yang-tree-diagrams]
              Bjorklund, M. and L. Berger, "YANG Tree Diagrams", draft-
              ietf-netmod-yang-tree-diagrams-06 (work in progress),
              February 2018.






Voit, et al.           Expires September 19, 2018              [Page 61]

Internet-Draft          Subscribed Notifications              March 2018


   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246,
              DOI 10.17487/RFC5246, August 2008,
              <https://www.rfc-editor.org/info/rfc5246>.

   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,
              and A. Bierman, Ed., "Network Configuration Protocol
              (NETCONF)", RFC 6241, DOI 10.17487/RFC6241, June 2011,
              <https://www.rfc-editor.org/info/rfc6241>.

   [RFC6242]  Wasserman, M., "Using the NETCONF Protocol over Secure
              Shell (SSH)", RFC 6242, DOI 10.17487/RFC6242, June 2011,
              <https://www.rfc-editor.org/info/rfc6242>.

   [RFC7923]  Voit, E., Clemm, A., and A. Gonzalez Prieto, "Requirements
              for Subscription to YANG Datastores", RFC 7923,
              DOI 10.17487/RFC7923, June 2016,
              <https://www.rfc-editor.org/info/rfc7923>.

   [RFC7950]  Bjorklund, M., Ed., "The YANG 1.1 Data Modeling Language",
              RFC 7950, DOI 10.17487/RFC7950, August 2016,
              <https://www.rfc-editor.org/info/rfc7950>.

   [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, "RESTCONF
              Protocol", RFC 8040, DOI 10.17487/RFC8040, January 2017,
              <https://www.rfc-editor.org/info/rfc8040>.

   [RFC8071]  Watsen, K., "NETCONF Call Home and RESTCONF Call Home",
              RFC 8071, DOI 10.17487/RFC8071, February 2017,
              <https://www.rfc-editor.org/info/rfc8071>.

Appendix A.  Changes between revisions

   (To be removed by RFC editor prior to publication)

   v10 - v11

   o  Access control filtering of events in streams included to match
      RFC5277 behavior

   o  security considerations updated based on YANG template.

   o  dependency QoS made non-normative on HTTP2 QoS

   o  tree diagrams referenced for each figure using them

   o  reference numbers placed into state machine figures




Voit, et al.           Expires September 19, 2018              [Page 62]

Internet-Draft          Subscribed Notifications              March 2018


   o  Broke configured replay into its own section

   o  Many tweaks updates based on LC and YANG doctor reviews

   o  Trees and YANG model reconciled were deltas existed

   o  New feature for interface originated.

   o  YANG model updates to collapse once used groups under
      'subscriptions'.

   v09 - v10

   o  Typos and tweaks

   v08 - v09

   o  NMDA model supported.  Non NMDA version at https://github.com/
      netconf-wg/rfc5277bis/

   o  Error mechanism revamped to match to embedded implementations.

   o  Explicitly identified error codes relevant to each RPC/
      Notification

   v07 - v08

   o  Split YANG trees to separate document subsections.

   o  Clarified configured state machine based on Balazs comments, and
      moved it into the configured subscription subsections.

   o  Normative reference to Network Instance model for VRF

   o  One transport for all receivers of configured subscriptions.

   o  QoS section moved in from yang-push

   v06 - v07

   o  Clarification on state machine for configured subscriptions.

   v05 - v06

   o  Made changes proposed by Martin, Kent, and others on the list.
      Most significant of these are Stream returned to string (with the
      SYSLOG identity removed), intro section on 5277 relationship, an
      identity set moved to an enumeration, clean up of definitions/



Voit, et al.           Expires September 19, 2018              [Page 63]

Internet-Draft          Subscribed Notifications              March 2018


      terminology, state machine proposed for configured subscriptions
      with a clean-up of subscription state options.

   o  JSON and XML become features.  Also Xpath and subtree filtering
      become features

   o  Terminology updates with event records, and refinement of filters
      to just stream filters.

   o  Encoding refined in establish-subscription so it takes the RPC's
      encoding as the default.

   o  Namespaces in examples fixed.

   v04 - v05

   o  Returned to the explicit filter subtyping of v00

   o  stream object changed to 'name' from 'stream'

   o  Cleaned up examples

   o  Clarified that JSON support needs notification-messages draft.

   v03 - v04

   o  Moved back to the use of RFC5277 one-way notifications and
      encodings.

   v03 - v04

   o  Replay updated

   v02 - v03

   o  RPCs and Notification support is identified by the Notification
      2.0 capability.

   o  Updates to filtering identities and text

   o  New error type for unsupportable volume of updates

   o  Text tweaks.

   v01 - v02

   o  Subscription status moved under receiver.




Voit, et al.           Expires September 19, 2018              [Page 64]

Internet-Draft          Subscribed Notifications              March 2018


   v00 - v01

   o  Security considerations updated

   o  Intro rewrite, as well as scattered text changes

   o  Added Appendix A, to help match this to related drafts in progress

   o  Updated filtering definitions, and filter types in yang file, and
      moved to identities for filter types

   o  Added Syslog as a stream

   o  HTTP2 moved in from YANG-Push as a transport option

   o  Replay made an optional feature for events.  Won't apply to
      datastores

   o  Enabled notification timestamp to have different formats.

   o  Two error codes added.

   v01 5277bis - v00 subscribed notifications

   o  Kill subscription RPC added.

   o  Renamed from 5277bis to Subscribed Notifications.

   o  Changed the notification capabilities version from 1.1 to 2.0.

   o  Extracted create-subscription and other elements of RFC5277.

   o  Error conditions added, and made specific in return codes.

   o  Simplified yang model structure for removal of 'basic' grouping.

   o  Added a grouping for items which cannot be statically configured.

   o  Operational counters per receiver.

   o  Subscription-id and filter-id renamed to identifier

   o  Section for replay added.  Replay now cannot be configured.

   o  Control plane notification renamed to subscription state
      notification





Voit, et al.           Expires September 19, 2018              [Page 65]

Internet-Draft          Subscribed Notifications              March 2018


   o  Source address: Source-vrf changed to string, default address
      option added

   o  In yang model: 'info' changed to 'policy'

   o  Scattered text clarifications

   v00 - v01 of 5277bis

   o  YANG Model changes.  New groupings for subscription info to allow
      restriction of what is changeable via RPC.  Removed notifications
      for adding and removing receivers of configured subscriptions.

   o  Expanded/renamed definitions from event server to publisher, and
      client to subscriber as applicable.  Updated the definitions to
      include and expand on RFC 5277.

   o  Removal of redundancy with other drafts

   o  Many other clean-ups of wording and terminology

Authors' Addresses

   Eric Voit
   Cisco Systems

   Email: evoit@cisco.com


   Alexander Clemm
   Huawei

   Email: ludwig@clemm.org


   Alberto Gonzalez Prieto
   VMWare

   Email: agonzalezpri@vmware.com


   Einar Nilsen-Nygaard
   Cisco Systems

   Email: einarnn@cisco.com






Voit, et al.           Expires September 19, 2018              [Page 66]

Internet-Draft          Subscribed Notifications              March 2018


   Ambika Prasad Tripathy
   Cisco Systems

   Email: ambtripa@cisco.com















































